%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 630.000000 71.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 630 71
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 630 71
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.0039215689 0.0039215689 0.0039215689 sc
q
0 0 630 71 rc
130.11 1.61 m
143.89999 1.61 l
161.25 48.639999 l
149.02 48.639999 l
137.7 14.4 l
137.50999 14.4 l
125.82 48.639999 l
112.67 48.639999 l
130.11 1.61 l
h
130.11 1.61 m
f
174.33 35.650002 m
178.49716 38.86694 183.58672 40.661606 188.85001 40.77 c
196.07001 40.77 199.44 38.209999 199.44 30.629999 c
192.69 30.629999 l
187.57001 30.629999 181.55 30.17 176.89 27.889999 c
172.23 25.610001 168.89 21.5 168.89 14.47 c
168.89 5.4699998 177.02 0.47 185.33 0.47 c
190.89999 0.47 197.02 3.4000001 199.85001 8.6000004 c
200.03 8.6000004 l
200.06802 6.2575202 200.25171 3.9196737 200.58 1.6 c
211.36 1.6 l
211.08 5.25 210.89999 8.54 210.81 12.1 c
210.72 15.66 210.63 19.1 210.63 23.879999 c
210.63 29.879999 l
210.63 43.759998 204.69 49.689999 190.35001 49.689999 c
184.72002 49.608482 179.16364 48.397915 174.00999 46.130001 c
174.37 35.630001 l
h
180.53999 15.2 m
180.53999 22.41 188.67 23.32 194.14999 23.32 c
199.44 23.32 l
199.44 19.67 198.89999 16.32 196.89 13.64 c
194.87704 10.930011 191.67496 9.3643827 188.3 9.4399996 c
183.92 9.4399996 180.53999 11.18 180.53999 15.2 c
h
180.53999 15.2 m
f
237.45 25.26 m
237.45 31.559999 239.64999 40.259998 247.59 40.259998 c
255.53 40.259998 258.59 31.860001 258.59 25.26 c
258.59 18.66 255.94 10.01 247.81 10.01 c
239.67999 10.01 237.49001 18.780001 237.49001 25.26 c
h
259 1.65 m
270.87 1.65 l
270.87 70.099998 l
258.62 70.099998 l
258.62 43.16 l
258.44 43.16 l
254.78 47.630001 250.44 49.73 244.37 49.73 c
229.95 49.73 224.64999 38.23 224.64999 25.26 c
224.64999 12.29 229.95 0.50999999 244.37 0.50999999 c
250.12 0.50999999 255.14999 2.3399999 258.79999 6.9099998 c
258.98001 6.9099998 l
258.98001 1.65 l
h
259 1.65 m
f
347.70999 48 m
343.34805 49.105556 338.86966 49.686333 334.37 49.73 c
324.79001 49.73 315.92999 45.259998 315.92999 35.119999 c
315.92999 18.120001 337.20001 24.440001 337.20001 15.22 c
337.20001 10.65 332.26999 9.46 329.20001 9.46 c
324.992 9.5385885 320.86124 10.603826 317.14001 12.57 c
316.41 2.5699999 l
320.93613 1.3154401 325.60379 0.64334947 330.29999 0.56999999 c
340.25 0.56999999 350.01999 4.96 350.01999 15.92 c
350.01999 32.919998 328.73999 28.15 328.73999 35.639999 c
328.73999 39.639999 332.67001 40.849998 335.95999 40.849998 c
339.7193 40.875187 343.45016 40.196854 346.95999 38.849998 c
347.79001 48.07 l
h
347.70999 48 m
f
288.79999 1.61 m
301.03 1.61 l
301.03 48.639999 l
288.79999 48.639999 l
288.79999 1.61 l
h
288.79999 1.61 m
f
288.79001 57.220001 m
300.98999 57.220001 l
300.98999 69.43 l
288.79001 69.43 l
288.79001 57.220001 l
h
288.79001 57.220001 m
f
87.730003 57.23 m
99.940002 57.23 l
99.940002 69.43 l
87.730003 69.43 l
87.730003 57.23 l
h
87.730003 57.23 m
f
87.730003 1.61 m
99.970001 1.61 l
99.970001 48.639999 l
87.730003 48.639999 l
87.730003 1.61 l
h
87.730003 1.61 m
f
48.700001 1.65 m
60.700001 1.65 l
60.700001 18.870001 l
60.299999 41.650002 72.419998 36.720001 72.419998 36.720001 c
72.419998 49.650002 l
72.419998 49.779999 63.209999 48.650002 60.830002 41.310001 c
60.830002 48.650002 l
48.740002 48.650002 l
48.740002 1.65 l
h
48.700001 1.65 m
f
48.610001 57.23 m
60.810001 57.23 l
60.810001 69.43 l
48.610001 69.43 l
48.610001 57.23 l
h
48.610001 57.23 m
f
9.4399996 15.76 m
9.4399996 6.4499998 14.74 0.50999999 24.33 0.50999999 c
27.366846 0.45074531 30.39682 0.82107562 33.330002 1.61 c
32.959999 11.29 l
31.250229 10.375512 29.327467 9.9336567 27.389999 10.01 c
22.74 10.01 21.639999 13.75 21.639999 17.77 c
21.639999 39.650002 l
32.509998 39.650002 l
32.509998 48.650002 l
0.36000001 48.650002 l
0.36000001 39.650002 l
9.3599997 39.650002 l
9.3599997 15.72 l
h
9.4399996 15.76 m
f
9.3800001 57.23 m
21.59 57.23 l
21.59 69.43 l
9.3800001 69.43 l
9.3800001 57.23 l
h
9.3800001 57.23 m
f
383.10001 48.650002 m
389.48999 48.650002 l
390.50137 48.649971 391.50891 48.525707 392.48999 48.279999 c
393.39703 48.063366 394.25085 47.665375 395 47.110001 c
395.71564 46.567966 396.29443 45.865894 396.69 45.060001 c
397.13254 44.123302 397.34836 43.095585 397.32001 42.060001 c
397.32001 41.93 l
397.34961 40.874992 397.13394 39.827511 396.69 38.869999 c
396.29733 38.05946 395.71817 37.353504 395 36.810001 c
394.25085 36.254623 393.39703 35.856632 392.48999 35.639999 c
391.50848 35.397762 390.50095 35.276859 389.48999 35.279999 c
385.84 35.279999 l
385.84 26.15 l
383.10001 26.15 l
h
389.67999 37.470001 m
391.01114 37.373184 392.32956 37.784073 393.37 38.619999 c
394.25436 39.489769 394.7146 40.702488 394.63 41.939999 c
394.63 42.07 l
394.76343 43.346008 394.26721 44.607071 393.29999 45.450001 c
392.23386 46.167393 390.96323 46.518394 389.67999 46.450001 c
385.84 46.450001 l
385.84 37.450001 l
h
389.67999 37.470001 m
f
404.76001 25.889999 m
404.03671 25.887617 403.31656 25.985207 402.62 26.18 c
401.98328 26.352301 401.388 26.65164 400.87 27.059999 c
400.3718 27.466881 399.97473 27.983753 399.70999 28.57 c
399.41116 29.253645 399.26447 29.994059 399.28 30.74 c
399.25308 31.590857 399.49829 32.428116 399.98001 33.130001 c
400.45679 33.797497 401.0881 34.339615 401.82001 34.709999 c
402.6496 35.133015 403.54044 35.42321 404.45999 35.57 c
405.47324 35.751308 406.50067 35.841671 407.53 35.84 c
409.89001 35.84 l
409.89001 37.029999 l
409.98669 38.043308 409.69345 39.055367 409.07001 39.860001 c
408.32541 40.503712 407.34973 40.814487 406.37 40.720001 c
404.10333 40.720001 402.84332 39.743332 402.59 37.790001 c
399.98001 37.790001 l
400.03119 38.632233 400.27039 39.452305 400.67999 40.189999 c
401.05417 40.819569 401.55884 41.361721 402.16 41.779999 c
402.76962 42.188866 403.44669 42.486778 404.16 42.66 c
404.91696 42.838005 405.69241 42.925285 406.47 42.919998 c
407.23441 42.925365 407.99661 42.838062 408.73999 42.66 c
409.44327 42.491684 410.09955 42.166965 410.66 41.709999 c
411.23944 41.221878 411.69232 40.600906 411.98001 39.900002 c
412.34814 38.992821 412.52188 38.018509 412.48999 37.040001 c
412.48999 26.18 l
409.87 26.18 l
409.87 28.26 l
409.3085 27.519035 408.58734 26.914062 407.76001 26.49 c
406.81989 26.060612 405.79294 25.855225 404.76001 25.889999 c
h
405.01001 27.969999 m
405.66641 27.964334 406.32007 28.055309 406.95001 28.24 c
407.50766 28.396317 408.03036 28.657661 408.48999 29.01 c
408.90918 29.34605 409.2504 29.769136 409.48999 30.25 c
409.75272 30.773872 409.88318 31.354094 409.87 31.940001 c
409.87 33.939999 l
407.62 33.939999 l
406.85327 33.947235 406.08725 33.890373 405.32999 33.77 c
404.69931 33.678452 404.08585 33.493065 403.51001 33.220001 c
403.02872 32.998478 402.61469 32.65345 402.31 32.220001 c
402.01703 31.764862 401.87045 31.230925 401.89001 30.690001 c
401.85486 29.959496 402.1019 29.243441 402.57999 28.690001 c
403.25864 28.130011 404.13583 27.8701 405.01001 27.969999 c
h
405.01001 27.969999 m
f
417.23001 42.650002 m
419.84 42.650002 l
419.84 39.650002 l
420.08563 40.105198 420.37714 40.534092 420.70999 40.93 c
421.02783 41.317043 421.40201 41.654137 421.82001 41.93 c
422.27536 42.231567 422.77457 42.460941 423.29999 42.610001 c
423.95117 42.79224 424.62381 42.88641 425.29999 42.889999 c
425.29999 40.439999 l
424.54791 40.407223 423.80093 40.300034 423.07001 40.119999 c
422.43814 39.974903 421.84906 39.683792 421.35001 39.27 c
420.85587 38.844715 420.48322 38.296101 420.26999 37.68 c
419.99496 36.876068 419.86627 36.029346 419.89001 35.18 c
419.89001 26.18 l
417.28 26.18 l
h
417.23001 42.650002 m
f
433.82001 25.959999 m
432.58145 25.858511 431.35861 26.291599 430.45999 27.15 c
429.71313 28.024803 429.32703 29.150965 429.38 30.299999 c
429.38 40.439999 l
427.01999 40.439999 l
427.01999 42.650002 l
429.38 42.650002 l
429.38 46.400002 l
431.98999 46.400002 l
431.98999 42.650002 l
435.82999 42.650002 l
435.82999 40.450001 l
431.98999 40.450001 l
431.98999 30.559999 l
431.98999 28.969999 432.67001 28.17 434.04001 28.17 c
434.40918 28.163881 434.77795 28.197405 435.14001 28.27 c
435.44986 28.327393 435.7543 28.411028 436.04999 28.52 c
436.04999 26.309999 l
435.75446 26.200512 435.44998 26.116865 435.14001 26.059999 c
434.70358 25.989607 434.26202 25.956156 433.82001 25.959999 c
h
433.82001 25.959999 m
f
453.95999 25.889999 m
452.84848 25.878498 451.74622 26.092829 450.72 26.52 c
449.75946 26.923141 448.89163 27.518707 448.17001 28.27 c
447.44449 29.03874 446.87708 29.94252 446.5 30.93 c
446.09305 31.996056 445.88953 33.128956 445.89999 34.27 c
445.89999 34.52 l
445.88757 35.682533 446.09805 36.836678 446.51999 37.919998 c
446.90442 38.906109 447.47476 39.809155 448.20001 40.580002 c
448.92166 41.326283 449.78983 41.915279 450.75 42.310001 c
452.82993 43.123634 455.14008 43.123634 457.22 42.310001 c
458.18448 41.921558 459.05914 41.339588 459.79001 40.599998 c
460.51736 39.83461 461.08807 38.934387 461.47 37.950001 c
461.88855 36.866009 462.09561 35.711884 462.07999 34.549999 c
462.07999 34.299999 l
462.09473 33.131687 461.88773 31.971178 461.47 30.879999 c
461.08563 29.889219 460.50772 28.984951 459.76999 28.219999 c
459.03735 27.48258 458.16318 26.900923 457.20001 26.51 c
456.17221 26.089155 455.07056 25.878345 453.95999 25.889999 c
h
453.95999 28.1 m
454.7294 28.086285 455.49295 28.236265 456.20001 28.540001 c
456.8555 28.819948 457.43735 29.247772 457.89999 29.790001 c
458.38727 30.378099 458.75116 31.058279 458.97 31.790001 c
459.2305 32.604298 459.3588 33.45509 459.35001 34.310001 c
459.35001 34.529999 l
459.35818 35.401245 459.22998 36.268406 458.97 37.099998 c
458.75131 37.83588 458.37988 38.517376 457.88 39.099998 c
457.4133 39.637852 456.83255 40.06488 456.17999 40.349998 c
455.47885 40.650105 454.7226 40.799992 453.95999 40.790001 c
453.19427 40.798748 452.43503 40.648941 451.73001 40.349998 c
451.07449 40.070053 450.49265 39.642227 450.03 39.099998 c
449.54495 38.510399 449.1813 37.830692 448.95999 37.099998 c
448.69852 36.275623 448.57022 35.414803 448.57999 34.549999 c
448.57999 34.299999 l
448.49756 32.676525 449.00552 31.078074 450.01001 29.799999 c
451.00464 28.651426 452.4725 28.024454 453.98999 28.1 c
h
453.95999 28.1 m
f
466.29999 40.439999 m
463.94 40.439999 l
463.94 42.650002 l
466.29999 42.650002 l
466.29999 45.330002 l
466.2106 46.73774 466.64914 48.128258 467.53 49.23 c
468.49292 50.211403 469.83871 50.719727 471.20999 50.619999 c
471.54501 50.621967 471.87958 50.595203 472.20999 50.540001 c
472.48001 50.48 472.79001 50.400002 473.12 50.299999 c
473.12 48.07 l
472.85236 48.180824 472.57431 48.264576 472.29001 48.32 c
471.95996 48.37941 471.62534 48.409527 471.29001 48.41 c
470.58405 48.479088 469.89124 48.185394 469.45001 47.630001 c
469.06174 47.036953 468.86615 46.33844 468.89001 45.630001 c
468.89001 42.650002 l
472.89001 42.650002 l
472.89001 40.450001 l
468.89001 40.450001 l
468.89001 26.190001 l
466.28 26.190001 l
h
466.29999 40.439999 m
f
489.19 48.650002 m
495.82999 48.650002 l
503.13 26.139999 l
497.81 26.139999 l
496.26999 31.139999 l
488.12 31.139999 l
486.57001 26.139999 l
481.79001 26.139999 l
h
489.19 34.759998 m
495.19 34.759998 l
492.19 44.490002 l
h
489.19 34.759998 m
f
511.62 25.83 m
510.48038 25.823965 509.34787 26.009897 508.26999 26.379999 c
506.22818 27.071518 504.5936 28.625658 503.79999 30.629999 c
503.35052 31.765633 503.12964 32.978821 503.14999 34.200001 c
503.14999 34.459999 l
503.1315 35.681957 503.35583 36.895428 503.81 38.029999 c
504.62567 40.079849 506.27731 41.684212 508.35001 42.439999 c
509.40649 42.828979 510.52417 43.025421 511.64999 43.02 c
512.57996 43.021805 513.50671 42.910995 514.40997 42.689999 c
515.27258 42.484268 516.08746 42.114185 516.81 41.599998 c
517.5296 41.068947 518.1236 40.386158 518.54999 39.599998 c
519.0401 38.670479 519.32965 37.648453 519.40002 36.599998 c
515.08002 36.599998 l
515.00348 37.40913 514.62933 38.161045 514.03003 38.709999 c
513.37445 39.200279 512.56738 39.444515 511.75 39.400002 c
510.64798 39.445492 509.58743 38.976189 508.88 38.130001 c
508.10596 37.084274 507.72693 35.798378 507.81 34.5 c
507.81 34.25 l
507.71136 32.920464 508.08691 31.598972 508.87 30.52 c
509.61713 29.652842 510.72775 29.186377 511.87 29.26 c
512.72937 29.238745 513.56989 29.514198 514.25 30.040001 c
514.94666 30.635359 515.36346 31.494314 515.40002 32.41 c
519.52002 32.41 l
519.47272 31.479574 519.24872 30.566656 518.85999 29.719999 c
518.49225 28.924887 517.95258 28.221304 517.28003 27.66 c
516.57196 27.047626 515.74939 26.581953 514.85999 26.290001 c
513.81403 25.953516 512.71832 25.797953 511.62 25.83 c
h
511.62 25.83 m
f
528.62 25.83 m
527.48035 25.823965 526.3479 26.009897 525.27002 26.379999 c
523.22308 27.063074 521.58545 28.620152 520.79999 30.629999 c
520.35052 31.765633 520.12964 32.978821 520.15002 34.200001 c
520.15002 34.459999 l
520.13147 35.681957 520.35583 36.895428 520.81 38.029999 c
521.62561 40.076347 523.27252 41.679619 525.34003 42.439999 c
526.39996 42.828903 527.52094 43.025322 528.65002 43.02 c
529.57666 43.021782 530.50006 42.910969 531.40002 42.689999 c
532.26636 42.486202 533.08484 42.116009 533.81 41.599998 c
534.52661 41.068573 535.11731 40.385704 535.53998 39.599998 c
536.03937 38.674217 536.32953 37.650139 536.39001 36.599998 c
532.08002 36.599998 l
531.9989 37.407814 531.62549 38.15818 531.03003 38.709999 c
530.3714 39.201763 529.56067 39.446033 528.73999 39.400002 c
527.64117 39.443886 526.58429 38.97459 525.88 38.130001 c
525.10596 37.084274 524.72693 35.798378 524.81 34.5 c
524.81 34.25 l
524.69916 32.928185 525.0528 31.609104 525.81 30.52 c
526.55994 29.656698 527.66852 29.191074 528.81 29.26 c
529.66919 29.240374 530.50909 29.515654 531.19 30.040001 c
531.88696 30.6341 532.3009 31.494667 532.33002 32.41 c
536.46002 32.41 l
536.40308 31.481009 536.17957 30.56983 535.79999 29.719999 c
535.42999 28.926254 534.89069 28.223131 534.21997 27.66 c
533.51196 27.047626 532.68939 26.581953 531.79999 26.290001 c
530.77289 25.961134 529.69818 25.805672 528.62 25.83 c
h
528.62 25.83 m
f
545.71997 25.83 m
544.55212 25.818247 543.3913 26.011162 542.28998 26.4 c
541.27692 26.754923 540.35248 27.324593 539.58002 28.07 c
538.79413 28.798107 538.17645 29.688787 537.77002 30.68 c
537.32483 31.799129 537.10724 32.995789 537.13 34.200001 c
537.13 34.459999 l
537.11096 35.66391 537.32837 36.859852 537.77002 37.98 c
538.1991 38.986328 538.82855 39.894772 539.62 40.650002 c
540.3927 41.392548 541.3031 41.976841 542.29999 42.369999 c
543.36548 42.780148 544.49835 42.987053 545.64001 42.98 c
546.67676 42.986534 547.70746 42.82095 548.69 42.490002 c
549.63629 42.18034 550.50562 41.672367 551.23999 41 c
552.00757 40.270626 552.60803 39.383614 553 38.400002 c
553.44745 37.201908 553.65796 35.928345 553.62 34.650002 c
553.62 33.389999 l
541.76001 33.389999 l
541.73816 32.218433 542.1474 31.079655 542.90997 30.190001 c
544.40656 28.902948 546.55457 28.706217 548.26001 29.700001 c
548.78033 30.120914 549.13464 30.712603 549.26001 31.370001 c
553.62 31.370001 l
553.42651 29.715902 552.53955 28.221846 551.17999 27.26 c
549.55286 26.227386 547.64441 25.727545 545.71997 25.83 c
h
549.19 36.189999 m
549.20343 37.207039 548.84821 38.194557 548.19 38.970001 c
546.7049 40.191658 544.55585 40.166325 543.09998 38.91 c
542.3941 38.167538 541.95746 37.209835 541.85999 36.189999 c
h
549.19 36.189999 m
f
555.41998 42.650002 m
559.97998 42.650002 l
559.97998 40.040001 l
560.44928 40.907139 561.13922 41.634998 561.97998 42.150002 c
563.00165 42.772511 564.18463 43.078705 565.38 43.029999 c
566.14008 43.037609 566.89532 42.908905 567.60999 42.650002 c
568.27142 42.404957 568.87189 42.01944 569.37 41.52 c
569.88208 40.937805 570.26996 40.257263 570.51001 39.52 c
570.79535 38.597607 570.93042 37.635307 570.90997 36.669998 c
570.90997 26.190001 l
566.34998 26.190001 l
566.34998 36.009998 l
566.42291 36.898712 566.17841 37.784492 565.65997 38.509998 c
565.08014 39.093895 564.26929 39.387424 563.45001 39.310001 c
562.54871 39.342999 561.66998 39.023788 561 38.419998 c
560.29114 37.695183 559.927 36.701214 560 35.689999 c
560 26.190001 l
555.44 26.190001 l
h
555.41998 42.650002 m
f
579.62 25.860001 m
578.16547 25.746792 576.72577 26.218279 575.62 27.17 c
574.64819 28.222786 574.15588 29.63105 574.26001 31.059999 c
574.26001 39.400002 l
572.15997 39.400002 l
572.15997 42.650002 l
574.26001 42.650002 l
574.26001 46.209999 l
578.79999 46.209999 l
578.79999 42.650002 l
582.26001 42.650002 l
582.26001 39.41 l
578.79999 39.41 l
578.79999 31.48 l
578.7608 30.950956 578.92139 30.426439 579.25 30.01 c
579.61865 29.663292 580.11505 29.48575 580.62 29.52 c
580.93176 29.519159 581.24298 29.545931 581.54999 29.6 c
581.8241 29.652693 582.09216 29.733107 582.34998 29.84 c
582.34998 26.309999 l
582.03998 26.209999 581.65002 26.110001 581.19 26.01 c
580.67249 25.911222 580.14685 25.861004 579.62 25.860001 c
h
579.62 25.860001 m
f
589.72998 25.83 m
588.97491 25.822699 588.22412 25.94445 587.51001 26.190001 c
586.84119 26.427166 586.23328 26.809679 585.72998 27.309999 c
585.20013 27.863043 584.79742 28.525135 584.54999 29.25 c
584.25195 30.145809 584.10992 31.086128 584.13 32.029999 c
584.13 42.650002 l
588.62 42.650002 l
588.62 32.650002 l
588.55682 31.767046 588.81226 30.890696 589.34003 30.18 c
589.89276 29.596403 590.67828 29.291737 591.47998 29.35 c
592.37689 29.325804 593.24933 29.64403 593.91998 30.24 c
594.63568 30.960495 595.00098 31.95768 594.91998 32.970001 c
594.91998 42.650002 l
599.45001 42.650002 l
599.45001 26.190001 l
594.91998 26.190001 l
594.91998 28.77 l
594.48462 27.913021 593.8244 27.190575 593.01001 26.68 c
592.0224 26.084229 590.88269 25.788876 589.72998 25.83 c
h
589.72998 25.83 m
f
602.32001 42.650002 m
606.89001 42.650002 l
606.89001 39.5 l
607.31482 40.506405 608.00635 41.377728 608.89001 42.02 c
609.87323 42.628998 611.01398 42.935055 612.16998 42.900002 c
612.16998 38.650002 l
610.7948 38.752579 609.4209 38.435253 608.22998 37.740002 c
607.23346 36.94585 606.71271 35.696869 606.84998 34.43 c
606.84998 26.190001 l
602.28003 26.190001 l
h
602.32001 42.650002 m
f
621.27002 25.83 m
620.10217 25.818247 618.94128 26.011162 617.84003 26.4 c
616.8269 26.754923 615.90247 27.324593 615.13 28.07 c
614.34412 28.798107 613.72644 29.688787 613.32001 30.68 c
612.87482 31.799129 612.65723 32.995789 612.67999 34.200001 c
612.67999 34.459999 l
612.66095 35.66391 612.87836 36.859852 613.32001 37.98 c
613.73254 38.997154 614.34845 39.919334 615.13 40.689999 c
615.90265 41.432549 616.81311 42.016842 617.81 42.41 c
618.87549 42.820148 620.00836 43.02705 621.15002 43.02 c
622.18677 43.026535 623.21747 42.86095 624.20001 42.529999 c
625.1449 42.217293 626.01367 41.709679 626.75 41.040001 c
627.51758 40.310623 628.11798 39.423615 628.51001 38.439999 c
628.9762 37.232117 629.20044 35.944374 629.16998 34.650002 c
629.16998 33.389999 l
617.31 33.389999 l
617.28998 32.220486 617.69507 31.083441 618.45001 30.190001 c
619.94971 28.901232 622.10144 28.704527 623.81 29.700001 c
624.33032 30.120914 624.68463 30.712603 624.81 31.370001 c
629.12 31.370001 l
628.92651 29.715902 628.03955 28.221846 626.67999 27.26 c
625.06702 26.237431 623.17761 25.738005 621.27002 25.83 c
h
624.72998 36.189999 m
624.74896 37.207962 624.39307 38.197372 623.72998 38.970001 c
622.24493 40.191658 620.09589 40.166325 618.64001 38.91 c
617.93408 38.167538 617.4975 37.209835 617.40002 36.189999 c
h
624.72998 36.189999 m
f
ep
end
%%Trailer
%%EOF
