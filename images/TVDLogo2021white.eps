%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 651.000000 282.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 651 282
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 651 282
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 651 282 rc
255.33 124.11 m
276.64999 124.11 l
303.48001 196.82001 l
284.56 196.82001 l
267.04999 143.87 l
266.76999 143.87 l
248.7 196.82001 l
228.37 196.82001 l
255.33 124.11 l
h
255.33 124.11 m
f
323.70001 176.77 m
330.14642 181.7355 338.01459 184.50424 346.14999 184.67 c
357.31 184.67 362.53 180.67 362.53 169 c
352.07999 169 l
344.17999 169 334.85999 168.3 327.66 164.77 c
320.45999 161.24001 315.23001 154.88 315.23001 144.00999 c
315.23001 130.17 327.79999 122.41 340.64001 122.41 c
349.26001 122.41 358.72 126.93 363.09 134.97 c
363.38 134.97 l
363.439 131.33298 363.71951 127.70291 364.22 124.1 c
380.89001 124.1 l
380.45999 129.75 380.17999 134.83 380.04001 140.34 c
379.89999 145.85001 379.76001 151.21001 379.76001 158.55 c
379.76001 167.87 l
379.76001 189.33 370.57999 198.50999 348.41 198.50999 c
339.70261 198.38463 331.10919 196.51088 323.14001 193 c
h
333.29999 145.14 m
333.29999 156.28999 345.87 157.71001 354.29999 157.71001 c
362.48999 157.71001 l
362.48999 152.06 361.64001 146.84 358.54001 142.71001 c
355.43304 138.51892 350.48587 136.09566 345.26999 136.21001 c
338.48999 136.21001 333.26999 138.89999 333.26999 145.11 c
h
333.29999 145.14 m
f
421.29999 160.64999 m
421.29999 170.39 424.69 183.81 436.97 183.81 c
449.25 183.81 453.91 170.81 453.91 160.64999 c
453.91 150.49001 449.82001 137.07001 437.25 137.07001 c
424.67999 137.07001 421.25 150.63 421.25 160.64999 c
h
454.62 124.1 m
472.97 124.1 l
472.97 230 l
454.04999 230 l
454.04999 188.35001 l
453.76999 188.35001 l
448.12 195.25999 441.48999 198.50999 432.03 198.50999 c
409.72 198.50999 401.53 180.72 401.53 160.67 c
401.53 140.62 409.72 122.41 432.03 122.41 c
440.92001 122.41 448.69 125.23 454.34 132.28999 c
454.62 132.28999 l
h
454.62 124.1 m
f
591.77002 195.83 m
585.84003 197.10001 580.04999 198.50999 571.15002 198.50999 c
556.33002 198.50999 542.63 191.59 542.63 175.92 c
542.63 149.66 575.53003 159.39999 575.53003 145.14 c
575.53003 138.08 567.90997 136.24001 563.10999 136.24001 c
556.60547 136.35979 550.22028 138.00746 544.46997 141.05 c
543.34003 125.52 l
550.3302 123.56664 557.54285 122.52139 564.79999 122.41 c
580.19 122.41 595.29999 129.19 595.29999 146.13 c
595.29999 172.39 562.40002 165.05 562.40002 176.63 c
562.40002 182.84 568.46997 184.63 573.54999 184.63 c
580.46997 184.63 584.71002 183.50999 590.54999 181.53 c
591.82001 195.78999 l
h
591.77002 195.83 m
f
500.67999 124.11 m
519.59998 124.11 l
519.59998 196.82001 l
500.67999 196.82001 l
500.67999 124.11 l
h
500.67999 124.11 m
f
500.67001 210.09 m
519.53998 210.09 l
519.53998 228.96001 l
500.67001 228.96001 l
500.67001 210.09 l
h
500.67001 210.09 m
f
189.81 210.09 m
208.67 210.09 l
208.67 228.96001 l
189.81 228.96001 l
189.81 210.09 l
h
189.81 210.09 m
f
189.81 124.11 m
208.72 124.11 l
208.72 196.82001 l
189.81 196.82001 l
189.81 124.11 l
h
189.81 124.11 m
f
129.46001 124.1 m
147.95 124.1 l
147.95 150.78999 l
147.34 186.00999 166.08 178.39 166.08 178.39 c
166.08 198.39 l
166.08 198.60001 151.84 196.87 148.16 185.5 c
148.16 196.82001 l
129.47 196.82001 l
129.47 124.1 l
h
129.46001 124.1 m
f
129.32001 210.09 m
148.17999 210.09 l
148.17999 228.96001 l
129.32001 228.96001 l
129.32001 210.09 l
h
129.32001 210.09 m
f
68.760002 145.99001 m
68.760002 131.59 76.949997 122.41 91.760002 122.41 c
96.483223 122.30601 101.1972 122.87505 105.76 124.1 c
105.19 139.10001 l
103.19 137.83 99.970001 137.10001 96.580002 137.10001 c
89.379997 137.10001 87.690002 142.89 87.690002 149.10001 c
87.690002 182.98 l
104.49 182.98 l
104.49 196.82001 l
54.790001 196.82001 l
54.790001 182.98 l
68.790001 182.98 l
68.790001 145.98 l
h
68.760002 145.99001 m
f
68.660004 210.09 m
87.529999 210.09 l
87.529999 228.96001 l
68.660004 228.96001 l
68.660004 210.09 l
h
68.660004 210.09 m
f
56.790001 86.410004 m
66.669998 86.410004 l
68.251129 86.418831 69.827011 86.227303 71.360001 85.839996 c
72.758522 85.50808 74.075104 84.895714 75.230003 84.040001 c
76.341454 83.202446 77.24202 82.116974 77.860001 80.870003 c
78.554855 79.416817 78.897453 77.820328 78.860001 76.209999 c
78.860001 76.010002 l
78.899124 74.377014 78.556709 72.757423 77.860001 71.279999 c
77.248131 70.023521 76.346756 68.930222 75.230003 68.089996 c
74.07579 67.23098 72.759201 66.615211 71.360001 66.279999 c
69.825691 65.900917 68.250427 65.712822 66.669998 65.720001 c
61.02 65.720001 l
61.02 51.599998 l
56.790001 51.599998 l
h
66.959999 69.129997 m
69.011749 68.983604 71.043343 69.615578 72.650002 70.900002 c
74.033768 72.240067 74.76413 74.117096 74.650002 76.040001 c
74.650002 76.230003 l
74.650002 78.699997 73.970001 80.440002 72.650002 81.470001 c
70.998283 82.572998 69.033104 83.109917 67.050003 83 c
61.110001 83 l
61.110001 69.129997 l
h
66.959999 69.129997 m
f
90.269997 51.169998 m
89.152214 51.161644 88.038544 51.30632 86.959999 51.599998 c
85.97612 51.868103 85.057358 52.334293 84.260002 52.970001 c
83.487862 53.596992 82.871712 54.394569 82.459999 55.299999 c
81.996056 56.357983 81.770729 57.505135 81.800003 58.66 c
81.757584 59.975307 82.132103 61.270351 82.870003 62.360001 c
83.613159 63.387749 84.590019 64.224075 85.720001 64.800003 c
87.008133 65.447845 88.387192 65.896294 89.809998 66.129997 c
91.374168 66.412132 92.960587 66.552704 94.550003 66.550003 c
98.209999 66.550003 l
98.209999 68.379997 l
98.209999 70.379997 97.779999 71.870003 96.940002 72.760002 c
96.099998 73.650002 94.699997 74.089996 92.75 74.089996 c
89.25 74.089996 87.303337 72.580002 86.910004 69.559998 c
82.910004 69.559998 l
82.990875 70.860878 83.367058 72.126228 84.010002 73.260002 c
84.580727 74.240219 85.363091 75.080658 86.300003 75.720001 c
87.24482 76.361824 88.298706 76.826073 89.410004 77.089996 c
90.58358 77.36396 91.784866 77.501541 92.989998 77.5 c
94.168724 77.501328 95.343498 77.363708 96.489998 77.089996 c
97.590431 76.83918 98.61747 76.33593 99.489998 75.620003 c
100.36531 74.858864 101.05025 73.903366 101.49 72.830002 c
102.04895 71.422104 102.3111 69.913933 102.26 68.400002 c
102.26 51.599998 l
98.260002 51.599998 l
98.260002 54.82 l
97.38575 53.678947 96.268822 52.746464 94.989998 52.09 c
93.509018 51.422333 91.893318 51.107407 90.269997 51.169998 c
h
90.660004 54.380001 m
91.674477 54.372265 92.684799 54.510342 93.660004 54.790001 c
94.524185 55.038334 95.334641 55.445255 96.050003 55.990002 c
97.446358 57.069588 98.250824 58.745239 98.220001 60.509998 c
98.220001 63.650002 l
94.709999 63.650002 l
93.527946 63.656208 92.347359 63.565907 91.18 63.380001 c
90.203423 63.236408 89.253258 62.950012 88.360001 62.529999 c
87.618858 62.187943 86.980812 61.656811 86.510002 60.990002 c
86.048515 60.291756 85.81768 59.466343 85.849998 58.630001 c
85.78653 57.484257 86.17012 56.358582 86.919998 55.490002 c
87.633331 54.75 88.866669 54.380001 90.620003 54.380001 c
h
90.660004 54.380001 m
f
109.55 77.059998 m
113.55 77.059998 l
113.55 72.489998 l
113.92373 73.200417 114.3694 73.870598 114.88 74.489998 c
115.92126 75.73951 117.31537 76.645683 118.88 77.089996 c
119.85675 77.365837 120.86517 77.513741 121.88 77.529999 c
121.88 73.650002 l
120.71411 73.599426 119.55563 73.438713 118.42 73.169998 c
117.44601 72.942116 116.53864 72.490135 115.77 71.849998 c
115.00779 71.188103 114.42915 70.34082 114.09 69.389999 c
113.66692 68.145035 113.47048 66.834297 113.51 65.519997 c
113.51 51.52 l
109.51 51.52 l
h
109.55 77.059998 m
f
135.2 51.259998 m
132.86 51.259998 131.13 51.876667 130.00999 53.110001 c
128.8513 54.460754 128.25058 56.202129 128.33 57.98 c
128.33 73.650002 l
124.68 73.650002 l
124.68 77.059998 l
128.33 77.059998 l
128.33 82.849998 l
132.33 82.849998 l
132.33 77.059998 l
138.27 77.059998 l
138.27 73.650002 l
132.33 73.650002 l
132.33 58.369999 l
132.33 55.896667 133.38667 54.663334 135.5 54.669998 c
136.07024 54.663513 136.63971 54.71376 137.2 54.82 c
137.68076 54.907417 138.15266 55.037945 138.61 55.209999 c
138.61 51.799999 l
138.15216 51.629482 137.68039 51.498993 137.2 51.41 c
136.53915 51.300289 135.86981 51.250088 135.2 51.259998 c
h
135.2 51.259998 m
f
166.34 51.169998 m
164.62282 51.161327 162.92175 51.501541 161.34 52.169998 c
159.85661 52.792503 158.51591 53.711258 157.39999 54.869999 c
156.2704 56.051041 155.39264 57.449341 154.82001 58.98 c
154.18967 60.626602 153.87419 62.376942 153.89 64.139999 c
153.89 64.529999 l
153.88554 66.330994 154.22496 68.116287 154.89 69.790001 c
155.48453 71.316658 156.37106 72.712715 157.5 73.900002 c
158.60968 75.061134 159.95241 75.974449 161.44 76.580002 c
164.65294 77.846954 168.22705 77.846954 171.44 76.580002 c
172.94304 75.984306 174.30536 75.081764 175.44 73.93 c
176.56746 72.751114 177.45102 71.361198 178.03999 69.839996 c
178.70505 68.166283 179.04445 66.380997 179.03999 64.580002 c
179.03999 64.190002 l
179.04164 62.382778 178.70238 60.591461 178.03999 58.91 c
177.45406 57.37434 176.55888 55.975426 175.41 54.799999 c
174.27168 53.652706 172.91035 52.750824 171.41 52.150002 c
169.80365 51.483898 168.07887 51.150513 166.34 51.169998 c
h
166.34 54.57 m
167.52789 54.555538 168.70593 54.78706 169.8 55.25 c
170.8145 55.685272 171.71461 56.349232 172.42999 57.189999 c
173.1669 58.075207 173.72704 59.093632 174.08 60.189999 c
174.4848 61.446449 174.68404 62.760025 174.67 64.080002 c
174.67 64.419998 l
174.68855 65.776306 174.48935 67.126808 174.08 68.419998 c
173.73248 69.54303 173.16098 70.583977 172.39999 71.480003 c
171.68015 72.313484 170.78102 72.973289 169.77 73.410004 c
168.68703 73.874763 167.51837 74.106453 166.34 74.089996 c
165.15533 74.104523 163.98055 73.872978 162.89 73.410004 c
161.87468 72.980804 160.97398 72.319824 160.25999 71.480003 c
159.5166 70.597626 158.95271 69.578545 158.60001 68.480003 c
158.19113 67.18692 157.99524 65.83596 158.02 64.480003 c
158.02 64.089996 l
157.87859 61.563633 158.66844 59.073105 160.24001 57.09 c
161.79547 55.351891 164.06213 54.423111 166.39 54.57 c
h
166.34 54.57 m
f
185.42 73.650002 m
181.77 73.650002 l
181.77 77.059998 l
185.42 77.059998 l
185.42 81.199997 l
185.29298 83.365715 185.96953 85.502151 187.32001 87.199997 c
188.81238 88.717567 190.89763 89.50045 193.02 89.339996 c
193.55588 89.348976 194.09146 89.308807 194.62 89.220001 c
195.09767 89.127975 195.5687 89.004372 196.03 88.849998 c
196.03 85.400002 l
195.61655 85.579514 195.18365 85.710388 194.74001 85.790001 c
194.21954 85.891792 193.69032 85.942039 193.16 85.940002 c
192.06938 86.044426 191.00018 85.58889 190.32001 84.730003 c
189.71269 83.794998 189.41208 82.693886 189.46001 81.580002 c
189.46001 77.029999 l
195.69 77.029999 l
195.69 73.650002 l
189.46001 73.650002 l
189.46001 51.599998 l
185.46001 51.599998 l
h
185.42 73.650002 m
f
220.81 86.410004 m
231.08 86.410004 l
242.37 51.599998 l
234.14 51.599998 l
231.75999 59.34 l
219.14999 59.34 l
216.77 51.599998 l
209.37 51.599998 l
h
220.81 64.940002 m
230 64.940002 l
225.42999 79.940002 l
h
220.81 64.940002 m
f
255.46001 51.07 m
253.69733 51.053604 251.94501 51.341148 250.28 51.919998 c
247.12531 52.991791 244.59947 55.393349 243.37 58.490002 c
242.67368 60.248901 242.33376 62.128628 242.37 64.019997 c
242.37 64.410004 l
242.33534 66.297997 242.67523 68.174141 243.37 69.93 c
244.01196 71.511543 244.97177 72.94445 246.19 74.139999 c
247.39719 75.280174 248.82239 76.164558 250.38 76.739998 c
252.01443 77.348228 253.74611 77.653221 255.49001 77.639999 c
256.92542 77.642975 258.35587 77.471718 259.75 77.129997 c
261.08511 76.810387 262.34744 76.240303 263.47 75.449997 c
264.57596 74.637833 265.49072 73.593376 266.14999 72.389999 c
266.90939 70.956764 267.3559 69.378647 267.45999 67.760002 c
260.79999 67.760002 l
260.67368 69.012321 260.09396 70.175285 259.17001 71.029999 c
258.155 71.789169 256.90567 72.167862 255.64 72.099998 c
253.93289 72.157394 252.29599 71.418388 251.21001 70.099998 c
250.007 68.490791 249.41832 66.504837 249.55 64.5 c
249.55 64.110001 l
249.40305 62.052242 249.9796 60.007793 251.17999 58.330002 c
252.33264 57.009277 254.02969 56.293564 255.78 56.389999 c
257.10886 56.361286 258.4075 56.788284 259.45999 57.599998 c
260.54175 58.51424 261.185 59.844372 261.23001 61.259998 c
267.62 61.259998 l
267.54703 59.823391 267.20795 58.412819 266.62 57.099998 c
266.04761 55.872311 265.21503 54.783817 264.17999 53.91 c
263.0834 52.966358 261.8129 52.246189 260.44 51.790001 c
258.83105 51.276989 257.14835 51.033703 255.46001 51.07 c
h
255.46001 51.07 m
f
281.73999 51.07 m
279.97745 51.055195 278.2254 51.342693 276.56 51.919998 c
273.4053 52.991791 270.87946 55.393349 269.64999 58.490002 c
268.95367 60.248901 268.61374 62.128628 268.64999 64.019997 c
268.64999 64.410004 l
268.61536 66.297997 268.95523 68.174141 269.64999 69.93 c
270.29916 71.510155 271.26187 72.942322 272.48001 74.139999 c
273.68356 75.279915 275.10547 76.164352 276.66 76.739998 c
278.29468 77.347359 280.02618 77.652328 281.76999 77.639999 c
283.20541 77.642975 284.63586 77.471718 286.03 77.129997 c
287.36743 76.808159 288.63266 76.238304 289.76001 75.449997 c
290.86301 74.637451 291.77441 73.592926 292.42999 72.389999 c
293.19287 70.957542 293.64282 69.379387 293.75 67.760002 c
287.07999 67.760002 l
286.95731 69.013367 286.37701 70.177559 285.45001 71.029999 c
284.43579 71.790718 283.18588 72.169586 281.92001 72.099998 c
280.21289 72.157394 278.57599 71.418388 277.48999 70.099998 c
276.29453 68.487457 275.70987 66.50312 275.84 64.5 c
275.84 64.110001 l
275.84 61.549999 276.38 59.630001 277.47 58.330002 c
278.62173 57.008026 280.31943 56.292038 282.07001 56.389999 c
283.39581 56.361153 284.69135 56.788288 285.73999 57.599998 c
286.81845 58.51786 287.46387 59.844944 287.51999 61.259998 c
293.89001 61.259998 l
293.81702 59.823391 293.47794 58.412819 292.89001 57.099998 c
292.32108 55.87294 291.49188 54.784412 290.45999 53.91 c
289.35837 52.96817 288.08499 52.248283 286.70999 51.790001 c
285.10425 51.27808 283.42502 51.034809 281.73999 51.07 c
h
281.73999 51.07 m
f
308.22 51.07 m
306.41541 51.050312 304.6214 51.348183 302.92001 51.950001 c
299.76633 53.079697 297.22842 55.476196 295.92001 58.560001 c
295.22919 60.296055 294.88931 62.151806 294.92001 64.019997 c
294.92001 64.410004 l
294.89688 66.274315 295.23651 68.125343 295.92001 69.860001 c
296.55637 71.430832 297.50952 72.853737 298.72 74.040001 c
299.91144 75.190559 301.31836 76.094513 302.85999 76.699997 c
304.50464 77.338409 306.25589 77.65744 308.01999 77.639999 c
309.62363 77.647888 311.2178 77.394577 312.73999 76.889999 c
314.20123 76.405777 315.54382 75.618622 316.67999 74.580002 c
317.87357 73.464066 318.80579 72.098167 319.41 70.580002 c
320.12451 68.711174 320.46429 66.720016 320.41 64.720001 c
320.41 62.720001 l
302.06 62.720001 l
302.03323 60.911724 302.66599 59.155602 303.84 57.779999 c
306.15292 55.787865 309.47644 55.486458 312.10999 57.029999 c
312.9332 57.668976 313.495 58.58633 313.69 59.610001 c
320.35999 59.610001 l
320.05875 57.052433 318.68912 54.741848 316.59 53.25 c
314.09033 51.680405 311.16772 50.919201 308.22 51.07 c
h
313.57999 67.07 m
313.59235 68.655899 313.01907 70.19059 311.97 71.379997 c
309.67783 73.272514 306.3533 73.230217 304.10999 71.279999 c
303.01459 70.132637 302.33813 68.649376 302.19 67.07 c
h
313.57999 67.07 m
f
323.20999 77.059998 m
330.26999 77.059998 l
330.26999 73.059998 l
330.97305 74.386551 332.00632 75.509369 333.26999 76.32 c
334.84814 77.28849 336.68018 77.762169 338.53 77.68 c
339.70554 77.69603 340.87433 77.499542 341.98001 77.099998 c
343.00574 76.720711 343.9371 76.12368 344.70999 75.349998 c
345.50293 74.453651 346.09909 73.401009 346.45999 72.260002 c
346.90625 70.833549 347.11899 69.344345 347.09 67.849998 c
347.09 51.639999 l
340.03 51.639999 l
340.03 66.790001 l
340.14459 68.166168 339.76526 69.538155 338.95999 70.660004 c
338.06805 71.559334 336.8215 72.013969 335.56 71.900002 c
334.0701 72.00383 332.61179 71.436195 331.58417 70.35244 c
330.55652 69.268677 330.06717 67.78228 330.25 66.300003 c
330.25 51.599998 l
323.19 51.599998 l
h
323.20999 77.059998 m
f
360.62 51.119999 m
357.95334 51.119999 355.91 51.786667 354.48999 53.119999 c
353.09 54.459999 352.39999 56.470001 352.39999 59.119999 c
352.39999 72.050003 l
349.14001 72.050003 l
349.14001 77.050003 l
352.39999 77.050003 l
352.39999 82.550003 l
359.39999 82.550003 l
359.39999 77.050003 l
364.75 77.050003 l
364.75 72.050003 l
359.39999 72.050003 l
359.39999 59.779999 l
359.33606 58.964905 359.58652 58.156246 360.10001 57.52 c
360.66782 56.978954 361.43777 56.702934 362.22 56.759998 c
362.70316 56.754906 363.18558 56.798458 363.66 56.889999 c
364.08453 56.967419 364.50003 57.088047 364.89999 57.25 c
364.89999 51.799999 l
364.30667 51.609688 363.70221 51.456066 363.09 51.34 c
362.27634 51.182617 361.44867 51.108902 360.62 51.119999 c
h
360.62 51.119999 m
f
376.26999 51.07 m
375.09991 51.060677 373.93671 51.250034 372.82999 51.630001 c
371.7944 51.99152 370.85422 52.582996 370.07999 53.360001 c
369.26089 54.214607 368.63959 55.238754 368.26001 56.360001 c
367.80185 57.742626 367.58536 59.193855 367.62 60.650002 c
367.62 77.050003 l
374.62 77.050003 l
374.62 61.650002 l
374.51846 60.283054 374.91644 58.925709 375.73999 57.830002 c
376.59341 56.924416 377.80887 56.450714 379.04999 56.540001 c
380.53821 56.439308 381.99368 57.008316 383.01898 58.091671 c
384.04431 59.175022 384.53241 60.659576 384.35001 62.139999 c
384.35001 77.059998 l
391.35001 77.059998 l
391.35001 51.599998 l
384.35001 51.599998 l
384.35001 55.599998 l
383.68152 54.27367 382.66534 53.153809 381.41 52.360001 c
379.85983 51.436268 378.07266 50.987736 376.26999 51.07 c
h
376.26999 51.07 m
f
395.73001 77.059998 m
402.79001 77.059998 l
402.79001 72.190002 l
403.47293 73.750832 404.5647 75.098267 405.95001 76.089996 c
407.47208 77.026077 409.2338 77.49865 411.01999 77.449997 c
411.01999 70.879997 l
408.89426 71.034752 406.77142 70.543251 404.92999 69.470001 c
403.50333 68.489998 402.79001 66.786667 402.79001 64.360001 c
402.79001 51.599998 l
395.73001 51.599998 l
h
395.73001 77.059998 m
f
425.03 51.07 m
423.2254 51.050312 421.4314 51.348183 419.73001 51.950001 c
416.57632 53.079697 414.03842 55.476196 412.73001 58.560001 c
412.03922 60.296055 411.69931 62.151806 411.73001 64.019997 c
411.73001 64.410004 l
411.70688 66.274315 412.04651 68.125343 412.73001 69.860001 c
413.36636 71.430832 414.31952 72.853737 415.53 74.040001 c
416.72144 75.190559 418.12836 76.094513 419.67001 76.699997 c
421.31464 77.338409 423.06589 77.65744 424.82999 77.639999 c
426.43362 77.647888 428.0278 77.394577 429.54999 76.889999 c
431.01236 76.408272 432.35544 75.620827 433.48999 74.580002 c
434.68356 73.464066 435.61578 72.098167 436.22 70.580002 c
436.93451 68.711174 437.27429 66.720016 437.22 64.720001 c
437.22 62.720001 l
418.87 62.720001 l
418.84323 60.911724 419.47598 59.155602 420.64999 57.779999 c
422.96292 55.787865 426.28644 55.486458 428.92001 57.029999 c
429.746 57.666454 430.3085 58.584972 430.5 59.610001 c
437.17001 59.610001 l
436.86874 57.052433 435.49911 54.741848 433.39999 53.25 c
430.90088 51.679199 427.97787 50.917892 425.03 51.07 c
h
430.39001 67.07 m
430.40234 68.655899 429.82907 70.19059 428.78 71.379997 c
426.48782 73.272514 423.1633 73.230217 420.92001 71.279999 c
419.82458 70.132637 419.14813 68.649376 419 67.07 c
h
430.39001 67.07 m
f
ep
end
%%Trailer
%%EOF
