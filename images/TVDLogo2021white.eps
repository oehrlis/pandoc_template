%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 542.000000 179.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 542 179
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 542 179
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 542 179 rc
201.33 73.110001 m
222.64999 73.110001 l
249.48 145.82001 l
230.56 145.82001 l
213.05 92.870003 l
212.77 92.870003 l
194.7 145.82001 l
174.37 145.82001 l
201.33 73.110001 l
h
201.33 73.110001 m
f
269.70001 125.77 m
276.14642 130.7355 284.01459 133.50424 292.14999 133.67 c
303.31 133.67 308.53 129.67 308.53 118 c
298.07999 118 l
290.17999 118 280.85999 117.3 273.66 113.77 c
266.45999 110.24 261.23001 103.88 261.23001 93.010002 c
261.23001 79.169998 273.79999 71.410004 286.64001 71.410004 c
295.26001 71.410004 304.72 75.93 309.09 83.970001 c
309.38 83.970001 l
309.439 80.33297 309.71951 76.702911 310.22 73.099998 c
326.89001 73.099998 l
326.45999 78.75 326.17999 83.830002 326.04001 89.339996 c
325.89999 94.849998 325.76001 100.21 325.76001 107.55 c
325.76001 116.87 l
325.76001 138.33 316.57999 147.50999 294.41 147.50999 c
285.70261 147.38463 277.10919 145.51088 269.14001 142 c
h
279.29999 94.139999 m
279.29999 105.29 291.87 106.71 300.29999 106.71 c
308.48999 106.71 l
308.48999 101.06 307.64001 95.839996 304.54001 91.709999 c
301.43304 87.518913 296.48587 85.095657 291.26999 85.209999 c
284.48999 85.209999 279.26999 87.900002 279.26999 94.110001 c
h
279.29999 94.139999 m
f
367.29999 109.65 m
367.29999 119.39 370.69 132.81 382.97 132.81 c
395.25 132.81 399.91 119.81 399.91 109.65 c
399.91 99.489998 395.82001 86.07 383.25 86.07 c
370.67999 86.07 367.25 99.629997 367.25 109.65 c
h
400.62 73.099998 m
418.97 73.099998 l
418.97 179 l
400.04999 179 l
400.04999 137.35001 l
399.76999 137.35001 l
394.12 144.25999 387.48999 147.50999 378.03 147.50999 c
355.72 147.50999 347.53 129.72 347.53 109.67 c
347.53 89.620003 355.72 71.410004 378.03 71.410004 c
386.92001 71.410004 394.69 74.230003 400.34 81.290001 c
400.62 81.290001 l
h
400.62 73.099998 m
f
537.77002 144.83 m
531.84003 146.10001 526.04999 147.50999 517.15002 147.50999 c
502.32999 147.50999 488.63 140.59 488.63 124.92 c
488.63 98.660004 521.53003 108.4 521.53003 94.139999 c
521.53003 87.080002 513.90997 85.239998 509.10999 85.239998 c
502.6055 85.359787 496.22031 87.007469 490.47 90.050003 c
489.34 74.519997 l
496.33023 72.566643 503.54285 71.521385 510.79999 71.410004 c
526.19 71.410004 541.29999 78.190002 541.29999 95.129997 c
541.29999 121.39 508.39999 114.05 508.39999 125.63 c
508.39999 131.84 514.46997 133.63 519.54999 133.63 c
526.46997 133.63 530.71002 132.50999 536.54999 130.53 c
537.82001 144.78999 l
h
537.77002 144.83 m
f
446.67999 73.110001 m
465.60001 73.110001 l
465.60001 145.82001 l
446.67999 145.82001 l
446.67999 73.110001 l
h
446.67999 73.110001 m
f
446.67001 159.09 m
465.54001 159.09 l
465.54001 177.96001 l
446.67001 177.96001 l
446.67001 159.09 l
h
446.67001 159.09 m
f
135.81 159.09 m
154.67 159.09 l
154.67 177.96001 l
135.81 177.96001 l
135.81 159.09 l
h
135.81 159.09 m
f
135.81 73.110001 m
154.72 73.110001 l
154.72 145.82001 l
135.81 145.82001 l
135.81 73.110001 l
h
135.81 73.110001 m
f
75.459999 73.099998 m
93.949997 73.099998 l
93.949997 99.790001 l
93.339996 135.00999 112.08 127.39 112.08 127.39 c
112.08 147.39 l
112.08 147.60001 97.839996 145.87 94.160004 134.5 c
94.160004 145.82001 l
75.470001 145.82001 l
75.470001 73.099998 l
h
75.459999 73.099998 m
f
75.32 159.09 m
94.18 159.09 l
94.18 177.96001 l
75.32 177.96001 l
75.32 159.09 l
h
75.32 159.09 m
f
14.76 94.989998 m
14.76 80.589996 22.950001 71.410004 37.759998 71.410004 c
42.483223 71.306007 47.197197 71.875053 51.759998 73.099998 c
51.189999 88.099998 l
49.189999 86.830002 45.970001 86.099998 42.580002 86.099998 c
35.380001 86.099998 33.689999 91.889999 33.689999 98.099998 c
33.689999 131.98 l
50.490002 131.98 l
50.490002 145.82001 l
0.79000002 145.82001 l
0.79000002 131.98 l
14.79 131.98 l
14.79 94.980003 l
h
14.76 94.989998 m
f
14.66 159.09 m
33.529999 159.09 l
33.529999 177.96001 l
14.66 177.96001 l
14.66 159.09 l
h
14.66 159.09 m
f
2.79 35.41 m
12.67 35.41 l
14.251132 35.418831 15.827012 35.227303 17.360001 34.84 c
18.758518 34.508076 20.075104 33.89571 21.23 33.040001 c
22.341455 32.202446 23.242022 31.11697 23.860001 29.870001 c
24.554857 28.416819 24.897451 26.82033 24.860001 25.209999 c
24.860001 25.01 l
24.89912 23.377012 24.556711 21.75742 23.860001 20.280001 c
23.248131 19.023521 22.346758 17.930223 21.23 17.09 c
20.075787 16.230978 18.759201 15.61521 17.360001 15.28 c
15.825691 14.900917 14.250429 14.712826 12.67 14.72 c
7.02 14.72 l
7.02 0.60000002 l
2.79 0.60000002 l
h
12.96 18.129999 m
15.011749 17.983603 17.043341 18.615574 18.65 19.9 c
20.03377 21.240065 20.764132 23.117094 20.65 25.040001 c
20.65 25.23 l
20.65 27.700001 19.969999 29.440001 18.65 30.469999 c
16.998283 31.572998 15.033102 32.109913 13.05 32 c
7.1100001 32 l
7.1100001 18.129999 l
h
12.96 18.129999 m
f
36.27 0.17 m
35.152214 0.16164282 34.038548 0.30631882 32.959999 0.60000002 c
31.976122 0.86810458 31.057354 1.3342943 30.26 1.97 c
29.487864 2.5969939 28.871714 3.394568 28.459999 4.3000002 c
27.996059 5.3579845 27.770727 6.5051341 27.799999 7.6599998 c
27.757586 8.9753065 28.132099 10.270352 28.870001 11.36 c
29.613155 12.387748 30.590017 13.224078 31.719999 13.8 c
33.008137 14.447844 34.387196 14.89629 35.810001 15.13 c
37.374172 15.412131 38.96059 15.5527 40.549999 15.55 c
44.209999 15.55 l
44.209999 17.379999 l
44.209999 19.379999 43.779999 20.870001 42.939999 21.76 c
42.099998 22.65 40.700001 23.09 38.75 23.09 c
35.25 23.09 33.303333 21.58 32.91 18.559999 c
28.91 18.559999 l
28.990873 19.860874 29.36706 21.126226 30.01 22.26 c
30.580729 23.240217 31.363091 24.080658 32.299999 24.719999 c
33.244823 25.361824 34.29871 25.826075 35.41 26.09 c
36.583584 26.363962 37.784866 26.501541 38.990002 26.5 c
40.168724 26.501326 41.343494 26.36371 42.490002 26.09 c
43.590431 25.839178 44.61747 25.335928 45.490002 24.620001 c
46.365311 23.858868 47.050259 22.903368 47.490002 21.83 c
48.048954 20.422102 48.311096 18.913933 48.259998 17.4 c
48.259998 0.60000002 l
44.259998 0.60000002 l
44.259998 3.8199999 l
43.38575 2.678946 42.268818 1.7464634 40.990002 1.09 c
39.509022 0.42233121 37.893318 0.10740619 36.27 0.17 c
h
36.66 3.3800001 m
37.674477 3.3722634 38.684799 3.5103412 39.66 3.79 c
40.524185 4.0383329 41.334641 4.4452543 42.049999 4.9899998 c
43.446358 6.0695877 44.25082 7.7452402 44.220001 9.5100002 c
44.220001 12.65 l
40.709999 12.65 l
39.527946 12.656207 38.347359 12.565907 37.18 12.38 c
36.203423 12.236408 35.253262 11.950012 34.360001 11.53 c
33.618855 11.187942 32.980808 10.656813 32.509998 9.9899998 c
32.048512 9.2917566 31.817677 8.4663429 31.85 7.6300001 c
31.78653 6.4842553 32.170116 5.358583 32.919998 4.4899998 c
33.633335 3.75 34.866665 3.3800001 36.619999 3.3800001 c
h
36.66 3.3800001 m
f
55.549999 26.059999 m
59.549999 26.059999 l
59.549999 21.49 l
59.923733 22.200418 60.3694 22.870598 60.880001 23.49 c
61.921253 24.73951 63.315369 25.645685 64.879997 26.09 c
65.85675 26.365839 66.865173 26.513741 67.879997 26.530001 c
67.879997 22.65 l
66.714111 22.599428 65.555626 22.438711 64.419998 22.17 c
63.446018 21.942114 62.538635 21.490135 61.77 20.85 c
61.007786 20.188101 60.429153 19.340818 60.09 18.389999 c
59.66692 17.145033 59.470478 15.834297 59.509998 14.52 c
59.509998 0.51999998 l
55.509998 0.51999998 l
h
55.549999 26.059999 m
f
81.199997 0.25999999 m
78.860001 0.25999999 77.129997 0.87666667 76.010002 2.1099999 c
74.851295 3.4607561 74.25058 5.2021294 74.330002 6.98 c
74.330002 22.65 l
70.68 22.65 l
70.68 26.059999 l
74.330002 26.059999 l
74.330002 31.85 l
78.330002 31.85 l
78.330002 26.059999 l
84.269997 26.059999 l
84.269997 22.65 l
78.330002 22.65 l
78.330002 7.3699999 l
78.330002 4.8966665 79.386665 3.6633334 81.5 3.6700001 c
82.070236 3.663512 82.639709 3.7137592 83.199997 3.8199999 c
83.680756 3.9074161 84.152657 4.0379429 84.610001 4.21 c
84.610001 0.80000001 l
84.152161 0.62948257 83.680389 0.49899366 83.199997 0.41 c
82.539162 0.30028951 81.869812 0.25008827 81.199997 0.25999999 c
h
81.199997 0.25999999 m
f
112.34 0.17 m
110.62281 0.16132833 108.92176 0.50153929 107.34 1.17 c
105.85661 1.7925044 104.51591 2.7112594 103.4 3.8699999 c
102.27041 5.0510387 101.39264 6.4493413 100.82 7.98 c
100.18966 9.6266003 99.874191 11.376943 99.889999 13.14 c
99.889999 13.53 l
99.885551 15.330996 100.22496 17.116283 100.89 18.790001 c
101.48452 20.316656 102.37107 21.712713 103.5 22.9 c
104.60969 24.061134 105.9524 24.974453 107.44 25.58 c
110.65295 26.846956 114.22706 26.846956 117.44 25.58 c
118.94304 24.984304 120.30536 24.081766 121.44 22.93 c
122.56746 21.751114 123.45102 20.361195 124.04 18.84 c
124.70504 17.166283 125.04445 15.380996 125.04 13.58 c
125.04 13.19 l
125.04165 11.382776 124.70238 9.5914602 124.04 7.9099998 c
123.45406 6.3743415 122.55889 4.9754262 121.41 3.8 c
120.27168 2.6527057 118.91035 1.7508247 117.41 1.15 c
115.80364 0.48389935 114.07888 0.15051271 112.34 0.17 c
h
112.34 3.5699999 m
113.52789 3.5555389 114.70593 3.7870603 115.8 4.25 c
116.8145 4.6852722 117.71461 5.3492327 118.43 6.1900001 c
119.1669 7.0752072 119.72703 8.0936327 120.08 9.1899996 c
120.4848 10.446448 120.68404 11.760026 120.67 13.08 c
120.67 13.42 l
120.68855 14.776308 120.48935 16.126806 120.08 17.42 c
119.73249 18.543028 119.16099 19.583979 118.4 20.48 c
117.68015 21.313484 116.78103 21.973289 115.77 22.41 c
114.68703 22.874765 113.51838 23.106451 112.34 23.09 c
111.15533 23.104527 109.98055 22.872974 108.89 22.41 c
107.87469 21.980804 106.97398 21.319828 106.26 20.48 c
105.51661 19.597626 104.95272 18.578547 104.6 17.48 c
104.19113 16.186918 103.99524 14.835958 104.02 13.48 c
104.02 13.09 l
103.87858 10.563634 104.66843 8.0731058 106.24 6.0900002 c
107.79548 4.3518891 110.06213 3.4231117 112.39 3.5699999 c
h
112.34 3.5699999 m
f
131.42 22.65 m
127.77 22.65 l
127.77 26.059999 l
131.42 26.059999 l
131.42 30.200001 l
131.29298 32.365719 131.96953 34.502151 133.32001 36.200001 c
134.81238 37.717567 136.89763 38.500446 139.02 38.34 c
139.55588 38.348972 140.09146 38.308807 140.62 38.220001 c
141.09767 38.127979 141.5687 38.004375 142.03 37.849998 c
142.03 34.400002 l
141.61655 34.579514 141.18365 34.710392 140.74001 34.790001 c
140.21954 34.891792 139.69032 34.942036 139.16 34.939999 c
138.06938 35.044426 137.00018 34.58889 136.32001 33.73 c
135.71269 32.794998 135.41208 31.693888 135.46001 30.58 c
135.46001 26.030001 l
141.69 26.030001 l
141.69 22.65 l
135.46001 22.65 l
135.46001 0.60000002 l
131.46001 0.60000002 l
h
131.42 22.65 m
f
166.81 35.41 m
177.08 35.41 l
188.37 0.60000002 l
180.14 0.60000002 l
177.75999 8.3400002 l
165.14999 8.3400002 l
162.77 0.60000002 l
155.37 0.60000002 l
h
166.81 13.94 m
176 13.94 l
171.42999 28.940001 l
h
166.81 13.94 m
f
201.46001 0.07 m
199.69733 0.053605825 197.94501 0.3411482 196.28 0.92000002 c
193.12531 1.9917897 190.59947 4.3933487 189.37 7.4899998 c
188.67368 9.2489004 188.33376 11.128626 188.37 13.02 c
188.37 13.41 l
188.33534 15.297998 188.67523 17.174145 189.37 18.93 c
190.01196 20.511541 190.97177 21.944454 192.19 23.139999 c
193.39719 24.280178 194.82239 25.164557 196.38 25.74 c
198.01443 26.348227 199.74611 26.653219 201.49001 26.639999 c
202.9254 26.642971 204.35587 26.47172 205.75 26.129999 c
207.08511 25.810387 208.34746 25.240301 209.47 24.450001 c
210.57596 23.637829 211.49071 22.593378 212.14999 21.389999 c
212.90939 19.956762 213.35591 18.378649 213.46001 16.76 c
206.8 16.76 l
206.67368 18.012321 206.09398 19.175283 205.17 20.030001 c
204.15501 20.789173 202.90569 21.167864 201.64 21.1 c
199.93289 21.157391 198.29599 20.418388 197.21001 19.1 c
196.007 17.490795 195.41832 15.504841 195.55 13.5 c
195.55 13.11 l
195.40305 11.05224 195.9796 9.0077944 197.17999 7.3299999 c
198.33264 6.0092788 200.02969 5.2935638 201.78 5.3899999 c
203.10884 5.3612857 204.40749 5.7882848 205.46001 6.5999999 c
206.54175 7.5142422 207.18501 8.8443727 207.23 10.26 c
213.62 10.26 l
213.54703 8.82339 213.20795 7.4128175 212.62 6.0999999 c
212.04761 4.8723125 211.21503 3.7838182 210.17999 2.9100001 c
209.0834 1.9663596 207.81291 1.2461882 206.44 0.79000002 c
204.83107 0.27698812 203.14835 0.033703092 201.46001 0.07 c
h
201.46001 0.07 m
f
227.74001 0.07 m
225.97745 0.055194944 224.2254 0.34269312 222.56 0.92000002 c
219.4053 1.9917897 216.87947 4.3933487 215.64999 7.4899998 c
214.95367 9.2489004 214.61375 11.128626 214.64999 13.02 c
214.64999 13.41 l
214.61534 15.297998 214.95523 17.174145 215.64999 18.93 c
216.29915 20.510153 217.26187 21.942322 218.48 23.139999 c
219.68356 24.279917 221.10545 25.164351 222.66 25.74 c
224.29468 26.347363 226.02618 26.652327 227.77 26.639999 c
229.2054 26.642971 230.63586 26.47172 232.03 26.129999 c
233.36745 25.808157 234.63264 25.238304 235.75999 24.450001 c
236.86299 23.637453 237.7744 22.592924 238.42999 21.389999 c
239.19289 19.957544 239.64281 18.379391 239.75 16.76 c
233.08 16.76 l
232.95732 18.013371 232.377 19.177559 231.45 20.030001 c
230.43579 20.790718 229.18588 21.169584 227.92 21.1 c
226.21289 21.157391 224.57599 20.418388 223.49001 19.1 c
222.29454 17.487459 221.70987 15.50312 221.84 13.5 c
221.84 13.11 l
221.84 10.55 222.38 8.6300001 223.47 7.3299999 c
224.62173 6.0080256 226.31943 5.2920399 228.07001 5.3899999 c
229.3958 5.3611517 230.69133 5.7882876 231.74001 6.5999999 c
232.81845 7.5178604 233.46387 8.844945 233.52 10.26 c
239.89 10.26 l
239.81703 8.82339 239.47795 7.4128175 238.89 6.0999999 c
238.32106 4.8729401 237.49187 3.7844131 236.46001 2.9100001 c
235.35837 1.9681687 234.08499 1.2482835 232.71001 0.79000002 c
231.10426 0.27807963 229.425 0.034807682 227.74001 0.07 c
h
227.74001 0.07 m
f
254.22 0.07 m
252.41541 0.050312657 250.6214 0.34818384 248.92 0.94999999 c
245.76633 2.0796947 243.22844 4.4761958 241.92 7.5599999 c
241.2292 9.2960548 240.88931 11.151806 240.92 13.02 c
240.92 13.41 l
240.89687 15.274317 241.23651 17.12534 241.92 18.860001 c
242.55638 20.430832 243.50952 21.853735 244.72 23.040001 c
245.91144 24.190559 247.31834 25.094517 248.86 25.700001 c
250.50464 26.338413 252.25589 26.65744 254.02 26.639999 c
255.62361 26.647892 257.2178 26.394577 258.73999 25.889999 c
260.20123 25.405775 261.54382 24.618624 262.67999 23.58 c
263.87357 22.464066 264.80579 21.098169 265.41 19.58 c
266.12451 17.711178 266.46429 15.720019 266.41 13.72 c
266.41 11.72 l
248.06 11.72 l
248.03322 9.911725 248.66599 8.1556025 249.84 6.7800002 c
252.15291 4.7878637 255.47644 4.4864564 258.10999 6.0300002 c
258.9332 6.6689763 259.495 7.5863304 259.69 8.6099997 c
266.35999 8.6099997 l
266.05875 6.0524344 264.68912 3.7418492 262.59 2.25 c
260.09033 0.6804058 257.16772 -0.080798455 254.22 0.07 c
h
259.57999 16.07 m
259.59235 17.655901 259.01907 19.190586 257.97 20.379999 c
255.67781 22.272516 252.3533 22.230219 250.11 20.280001 c
249.01459 19.132639 248.33813 17.649376 248.19 16.07 c
h
259.57999 16.07 m
f
269.20999 26.059999 m
276.26999 26.059999 l
276.26999 22.059999 l
276.97305 23.386551 278.00632 24.509373 279.26999 25.32 c
280.84814 26.288488 282.68018 26.762169 284.53 26.68 c
285.70554 26.696032 286.87433 26.499542 287.98001 26.1 c
289.00574 25.720711 289.9371 25.12368 290.70999 24.35 c
291.50293 23.453653 292.09909 22.401005 292.45999 21.26 c
292.90625 19.833546 293.11899 18.344343 293.09 16.85 c
293.09 0.63999999 l
286.03 0.63999999 l
286.03 15.79 l
286.14459 17.166166 285.76526 18.538153 284.95999 19.66 c
284.06805 20.559332 282.8215 21.013968 281.56 20.9 c
280.0701 21.003832 278.61179 20.436197 277.58417 19.352438 c
276.55652 18.268679 276.06717 16.782276 276.25 15.3 c
276.25 0.60000002 l
269.19 0.60000002 l
h
269.20999 26.059999 m
f
306.62 0.12 m
303.95334 0.12 301.91 0.78666669 300.48999 2.1199999 c
299.09 3.46 298.39999 5.4699998 298.39999 8.1199999 c
298.39999 21.049999 l
295.14001 21.049999 l
295.14001 26.049999 l
298.39999 26.049999 l
298.39999 31.549999 l
305.39999 31.549999 l
305.39999 26.049999 l
310.75 26.049999 l
310.75 21.049999 l
305.39999 21.049999 l
305.39999 8.7799997 l
305.33606 7.9649043 305.58652 7.1562457 306.10001 6.52 c
306.66782 5.9789538 307.43777 5.7029357 308.22 5.7600002 c
308.70316 5.7549062 309.18558 5.7984591 309.66 5.8899999 c
310.08453 5.9674201 310.50003 6.0880475 310.89999 6.25 c
310.89999 0.80000001 l
310.30667 0.60968822 309.70221 0.45606461 309.09 0.34 c
308.27634 0.18261878 307.44867 0.1089016 306.62 0.12 c
h
306.62 0.12 m
f
322.26999 0.07 m
321.09991 0.060677551 319.93671 0.25003356 318.82999 0.63 c
317.7944 0.99152094 316.85422 1.5829964 316.07999 2.3599999 c
315.26089 3.2146077 314.63959 4.2387543 314.26001 5.3600001 c
313.80185 6.7426276 313.58536 8.1938553 313.62 9.6499996 c
313.62 26.049999 l
320.62 26.049999 l
320.62 10.65 l
320.51846 9.2830563 320.91644 7.9257083 321.73999 6.8299999 c
322.59341 5.9244161 323.80887 5.4507146 325.04999 5.54 c
326.53821 5.4393091 327.99368 6.0083179 329.01898 7.0916705 c
330.04431 8.1750231 330.53241 9.6595755 330.35001 11.14 c
330.35001 26.059999 l
337.35001 26.059999 l
337.35001 0.60000002 l
330.35001 0.60000002 l
330.35001 4.5999999 l
329.68152 3.2736695 328.66534 2.1538074 327.41 1.36 c
325.85983 0.43626696 324.07266 -0.012263562 322.26999 0.07 c
h
322.26999 0.07 m
f
341.73001 26.059999 m
348.79001 26.059999 l
348.79001 21.190001 l
349.47293 22.750834 350.5647 24.098269 351.95001 25.09 c
353.47208 26.026075 355.2338 26.498648 357.01999 26.450001 c
357.01999 19.879999 l
354.89426 20.034748 352.77142 19.543251 350.92999 18.469999 c
349.50333 17.49 348.79001 15.786667 348.79001 13.36 c
348.79001 0.60000002 l
341.73001 0.60000002 l
h
341.73001 26.059999 m
f
371.03 0.07 m
369.2254 0.050312657 367.4314 0.34818384 365.73001 0.94999999 c
362.57632 2.0796947 360.03842 4.4761958 358.73001 7.5599999 c
358.03922 9.2960548 357.69931 11.151806 357.73001 13.02 c
357.73001 13.41 l
357.70688 15.274317 358.04651 17.12534 358.73001 18.860001 c
359.36636 20.430832 360.31952 21.853735 361.53 23.040001 c
362.72144 24.190559 364.12836 25.094517 365.67001 25.700001 c
367.31464 26.338413 369.06589 26.65744 370.82999 26.639999 c
372.43362 26.647892 374.0278 26.394577 375.54999 25.889999 c
377.01236 25.408272 378.35544 24.620829 379.48999 23.58 c
380.68356 22.464066 381.61578 21.098169 382.22 19.58 c
382.93451 17.711178 383.27429 15.720019 383.22 13.72 c
383.22 11.72 l
364.87 11.72 l
364.84323 9.911725 365.47598 8.1556025 366.64999 6.7800002 c
368.96292 4.7878637 372.28644 4.4864564 374.92001 6.0300002 c
375.746 6.6664524 376.3085 7.5849705 376.5 8.6099997 c
383.17001 8.6099997 l
382.86874 6.0524344 381.49911 3.7418492 379.39999 2.25 c
376.90088 0.67919809 373.97787 -0.082107268 371.03 0.07 c
h
376.39001 16.07 m
376.40234 17.655901 375.82907 19.190586 374.78 20.379999 c
372.48782 22.272516 369.1633 22.230219 366.92001 20.280001 c
365.82458 19.132639 365.14813 17.649376 365 16.07 c
h
376.39001 16.07 m
f
ep
end
%%Trailer
%%EOF
