%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 630.000000 71.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 630 71
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 630 71
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.11764706 0.16078432 0.27450982 sc
q
0 0 630 71 rc
130.72 1.61 m
144.50999 1.61 l
161.86 48.639999 l
149.63 48.639999 l
138.3 14.4 l
138.12 14.4 l
126.43 48.639999 l
113.28 48.639999 l
130.72 1.61 l
h
130.72 1.61 m
f
174.94 35.650002 m
179.10716 38.86694 184.19672 40.661606 189.46001 40.77 c
196.67999 40.77 200.05 38.209999 200.05 30.629999 c
193.3 30.629999 l
188.17999 30.629999 182.16 30.17 177.5 27.889999 c
172.84 25.610001 169.5 21.5 169.5 14.47 c
169.5 5.4699998 177.63 0.47 185.94 0.47 c
191.50999 0.47 197.63 3.4000001 200.46001 8.6000004 c
200.64 8.6000004 l
200.67802 6.2575202 200.86171 3.9196737 201.19 1.6 c
211.97 1.6 l
211.69 5.25 211.50999 8.54 211.42 12.1 c
211.33 15.66 211.24001 19.1 211.24001 23.879999 c
211.24001 29.879999 l
211.24001 43.759998 205.3 49.689999 190.96001 49.689999 c
185.33002 49.608482 179.77364 48.397915 174.62 46.130001 c
174.98 35.630001 l
h
181.14999 15.2 m
181.14999 22.41 189.28 23.32 194.75999 23.32 c
200.05 23.32 l
200.05 19.67 199.50999 16.32 197.5 13.64 c
195.48705 10.930011 192.28496 9.3643827 188.91 9.4399996 c
184.53 9.4399996 181.14999 11.18 181.14999 15.2 c
h
181.14999 15.2 m
f
238.06 25.26 m
238.06 31.559999 240.25999 40.259998 248.2 40.259998 c
256.14001 40.259998 259.20001 31.860001 259.20001 25.26 c
259.20001 18.66 256.54999 10.01 248.42 10.01 c
240.28999 10.01 238.10001 18.780001 238.10001 25.26 c
h
259.62 1.65 m
271.48999 1.65 l
271.48999 70.099998 l
259.26001 70.099998 l
259.26001 43.16 l
259.07999 43.16 l
255.42 47.630001 251.13 49.73 245.00999 49.73 c
230.59 49.73 225.28999 38.23 225.28999 25.26 c
225.28999 12.29 230.59 0.50999999 245.00999 0.50999999 c
250.75999 0.50999999 255.78999 2.3399999 259.44 6.9099998 c
259.62 6.9099998 l
h
259.62 1.65 m
f
348.32001 48 m
343.95804 49.105556 339.47968 49.686333 334.98001 49.73 c
325.39999 49.73 316.54001 45.259998 316.54001 35.119999 c
316.54001 18.120001 337.81 24.440001 337.81 15.22 c
337.81 10.65 332.88 9.46 329.81 9.46 c
325.60202 9.5385885 321.47122 10.603826 317.75 12.57 c
317.01999 2.5699999 l
321.54611 1.3154401 326.21381 0.64334947 330.91 0.56999999 c
340.85999 0.56999999 350.63 4.96 350.63 15.92 c
350.63 32.919998 329.35001 28.15 329.35001 35.639999 c
329.35001 39.639999 333.28 40.849998 336.57001 40.849998 c
340.31253 40.868961 344.02582 40.190731 347.51999 38.849998 c
348.35001 48.07 l
h
348.32001 48 m
f
289.41 1.61 m
301.64001 1.61 l
301.64001 48.639999 l
289.41 48.639999 l
289.41 1.61 l
h
289.41 1.61 m
f
289.39999 57.220001 m
301.60001 57.220001 l
301.60001 69.43 l
289.39999 69.43 l
289.39999 57.220001 l
h
289.39999 57.220001 m
f
88.339996 57.23 m
100.55 57.23 l
100.55 69.43 l
88.339996 69.43 l
88.339996 57.23 l
h
88.339996 57.23 m
f
88.339996 1.61 m
100.58 1.61 l
100.58 48.639999 l
88.339996 48.639999 l
88.339996 1.61 l
h
88.339996 1.61 m
f
49.310001 1.65 m
61.310001 1.65 l
61.310001 18.870001 l
60.91 41.650002 73.029999 36.720001 73.029999 36.720001 c
73.029999 49.650002 l
73.029999 49.779999 63.82 48.650002 61.439999 41.310001 c
61.439999 48.650002 l
49.349998 48.650002 l
49.349998 1.65 l
h
49.310001 1.65 m
f
49.220001 57.23 m
61.419998 57.23 l
61.419998 69.43 l
49.220001 69.43 l
49.220001 57.23 l
h
49.220001 57.23 m
f
10.05 15.76 m
10.05 6.4499998 15.35 0.50999999 24.940001 0.50999999 c
27.976845 0.45074531 31.006821 0.82107562 33.939999 1.61 c
33.57 11.29 l
31.860229 10.375512 29.937466 9.9336567 28 10.01 c
23.35 10.01 22.25 13.75 22.25 17.77 c
22.25 39.650002 l
33.119999 39.650002 l
33.119999 48.650002 l
0.97000003 48.650002 l
0.97000003 39.650002 l
9.9700003 39.650002 l
9.9700003 15.72 l
h
10.05 15.76 m
f
9.9899998 57.23 m
22.200001 57.23 l
22.200001 69.43 l
9.9899998 69.43 l
9.9899998 57.23 l
h
9.9899998 57.23 m
f
0.0039215689 0.0039215689 0.0039215689 sc
383.70999 48.650002 m
390.10001 48.650002 l
391.11139 48.649971 392.11893 48.525707 393.10001 48.279999 c
394.00705 48.063366 394.86087 47.665375 395.60999 47.110001 c
396.32565 46.567966 396.90442 45.865894 397.29999 45.060001 c
397.74252 44.123302 397.95837 43.095585 397.92999 42.060001 c
397.92999 41.93 l
397.95959 40.874992 397.74396 39.827511 397.29999 38.869999 c
396.90732 38.05946 396.32819 37.353504 395.60999 36.810001 c
394.86087 36.254623 394.00705 35.856632 393.10001 35.639999 c
392.1185 35.397762 391.11096 35.276859 390.10001 35.279999 c
386.45001 35.279999 l
386.45001 26.15 l
383.70999 26.15 l
h
390.29001 37.470001 m
391.62112 37.373184 392.93954 37.784073 393.98001 38.619999 c
394.86435 39.489769 395.32462 40.702488 395.23999 41.939999 c
395.23999 42.07 l
395.37341 43.346008 394.8772 44.607071 393.91 45.450001 c
392.84384 46.167393 391.57321 46.518394 390.29001 46.450001 c
386.45001 46.450001 l
386.45001 37.450001 l
h
390.29001 37.470001 m
f
405.37 25.889999 m
404.6467 25.887617 403.92657 25.985207 403.23001 26.18 c
402.59329 26.352301 401.99802 26.65164 401.48001 27.059999 c
400.98178 27.466881 400.58472 27.983753 400.32001 28.57 c
400.02118 29.253645 399.87445 29.994059 399.89001 30.74 c
399.86307 31.590857 400.10828 32.428116 400.59 33.130001 c
401.06677 33.797497 401.69809 34.339615 402.42999 34.709999 c
403.25958 35.133015 404.15042 35.42321 405.07001 35.57 c
406.08325 35.751308 407.11066 35.841671 408.14001 35.84 c
410.5 35.84 l
410.5 37.029999 l
410.59671 38.043308 410.30347 39.055367 409.67999 39.860001 c
408.93539 40.503712 407.95972 40.814487 406.98001 40.720001 c
404.70667 40.720001 403.44666 39.743332 403.20001 37.790001 c
400.62 37.790001 l
400.6712 38.632233 400.91037 39.452305 401.32001 40.189999 c
401.69418 40.819569 402.19882 41.361721 402.79999 41.779999 c
403.40961 42.188866 404.0867 42.486778 404.79999 42.66 c
405.55695 42.838005 406.3324 42.925285 407.10999 42.919998 c
407.87439 42.925365 408.63663 42.838062 409.38 42.66 c
410.08328 42.491684 410.73956 42.166965 411.29999 41.709999 c
411.87946 41.221878 412.33231 40.600906 412.62 39.900002 c
412.98813 38.992821 413.16187 38.018509 413.13 37.040001 c
413.13 26.18 l
410.51001 26.18 l
410.51001 28.26 l
409.94852 27.519035 409.22733 26.914062 408.39999 26.49 c
407.45074 26.056028 406.41299 25.850534 405.37 25.889999 c
h
405.62 27.969999 m
406.2764 27.964334 406.93008 28.055309 407.56 28.24 c
408.11765 28.396317 408.64035 28.657661 409.10001 29.01 c
409.5192 29.34605 409.86038 29.769136 410.10001 30.25 c
410.3627 30.773872 410.49316 31.354094 410.48001 31.940001 c
410.48001 33.939999 l
408.22 33.939999 l
407.45328 33.947235 406.68726 33.890373 405.92999 33.77 c
405.29929 33.678452 404.68585 33.493065 404.10999 33.220001 c
403.62872 32.998478 403.21469 32.65345 402.91 32.220001 c
402.61703 31.764862 402.47046 31.230925 402.48999 30.690001 c
402.45486 29.959496 402.7019 29.243441 403.17999 28.690001 c
403.86115 28.127373 404.74252 27.867298 405.62 27.969999 c
h
405.62 27.969999 m
f
417.84 42.650002 m
420.45001 42.650002 l
420.45001 39.650002 l
420.69562 40.105198 420.98715 40.534092 421.32001 40.93 c
421.63782 41.317043 422.01199 41.654137 422.42999 41.93 c
422.88535 42.231567 423.38458 42.460941 423.91 42.610001 c
424.54504 42.787872 425.20059 42.882004 425.85999 42.889999 c
425.85999 40.439999 l
425.10791 40.407223 424.36093 40.300034 423.63 40.119999 c
422.99814 39.974903 422.40906 39.683792 421.91 39.27 c
421.41586 38.844715 421.04321 38.296101 420.82999 37.68 c
420.55496 36.876068 420.42627 36.029346 420.45001 35.18 c
420.45001 26.18 l
417.84 26.18 l
h
417.84 42.650002 m
f
434.42999 25.959999 m
433.19144 25.858511 431.9686 26.291599 431.07001 27.15 c
430.32312 28.024803 429.93701 29.150965 429.98999 30.299999 c
429.98999 40.439999 l
427.62 40.439999 l
427.62 42.650002 l
429.98001 42.650002 l
429.98001 46.400002 l
432.62 46.400002 l
432.62 42.650002 l
436.45999 42.650002 l
436.45999 40.450001 l
432.62 40.450001 l
432.62 30.559999 l
432.62 28.969999 433.29999 28.17 434.67001 28.17 c
435.03918 28.163881 435.40796 28.197405 435.76999 28.27 c
436.07986 28.327393 436.38431 28.411028 436.67999 28.52 c
436.67999 26.309999 l
436.38446 26.200512 436.07999 26.116865 435.76999 26.059999 c
435.327 25.988478 434.87869 25.955021 434.42999 25.959999 c
h
434.42999 25.959999 m
f
454.62 25.889999 m
453.50848 25.878498 452.40622 26.092829 451.38 26.52 c
450.41946 26.923141 449.55164 27.518707 448.82999 28.27 c
448.10449 29.03874 447.53708 29.94252 447.16 30.93 c
446.75302 31.996056 446.54953 33.128956 446.56 34.27 c
446.56 34.52 l
446.54758 35.682533 446.75806 36.836678 447.17999 37.919998 c
447.56442 38.906109 448.13477 39.809155 448.85999 40.580002 c
449.58167 41.326283 450.44983 41.915279 451.41 42.310001 c
453.48993 43.123634 455.80008 43.123634 457.88 42.310001 c
458.84448 41.921558 459.71915 41.339588 460.45001 40.599998 c
461.17737 39.83461 461.74808 38.934387 462.13 37.950001 c
462.54855 36.866009 462.75562 35.711884 462.73999 34.549999 c
462.73999 34.299999 l
462.75473 33.131687 462.54773 31.971178 462.13 30.879999 c
461.74564 29.889219 461.16772 28.984951 460.42999 28.219999 c
459.69736 27.48258 458.82318 26.900923 457.85999 26.51 c
456.83221 26.089155 455.73056 25.878345 454.62 25.889999 c
h
454.62 28.1 m
455.3894 28.086285 456.15295 28.236265 456.85999 28.540001 c
457.5155 28.819948 458.09735 29.247772 458.56 29.790001 c
459.04727 30.378099 459.41116 31.058279 459.63 31.790001 c
459.8905 32.604298 460.0188 33.45509 460.01001 34.310001 c
460.01001 34.529999 l
460.01819 35.401245 459.88998 36.268406 459.63 37.099998 c
459.41132 37.83588 459.03989 38.517376 458.54001 39.099998 c
458.0733 39.637852 457.49252 40.06488 456.84 40.349998 c
456.13885 40.650105 455.3826 40.799992 454.62 40.790001 c
453.85428 40.798748 453.09503 40.648941 452.39001 40.349998 c
451.7345 40.070053 451.15265 39.642227 450.69 39.099998 c
450.20496 38.510399 449.84131 37.830692 449.62 37.099998 c
449.35852 36.275623 449.23022 35.414803 449.23999 34.549999 c
449.23999 34.299999 l
449.15756 32.676525 449.6655 31.078074 450.67001 29.799999 c
451.65802 28.659914 453.11282 28.033792 454.62 28.1 c
h
454.62 28.1 m
f
466.91 40.439999 m
464.54999 40.439999 l
464.54999 42.650002 l
466.91 42.650002 l
466.91 45.330002 l
466.82062 46.73774 467.25916 48.128258 468.14001 49.23 c
469.10294 50.211403 470.4487 50.719727 471.82001 50.619999 c
472.155 50.621967 472.48956 50.595203 472.82001 50.540001 c
473.09 50.48 473.39999 50.400002 473.73001 50.299999 c
473.73001 48.07 l
473.46237 48.180824 473.18433 48.264576 472.89999 48.32 c
472.56998 48.37941 472.23532 48.409527 471.89999 48.41 c
471.19403 48.479088 470.50122 48.185394 470.06 47.630001 c
469.67172 47.036953 469.47614 46.33844 469.5 45.630001 c
469.5 42.650002 l
473.5 42.650002 l
473.5 40.450001 l
469.5 40.450001 l
469.5 26.190001 l
466.89001 26.190001 l
h
466.91 40.439999 m
f
489.79999 48.650002 m
496.44 48.650002 l
503.73999 26.139999 l
498.42001 26.139999 l
496.88 31.139999 l
488.73001 31.139999 l
487.17999 26.139999 l
482.39999 26.139999 l
h
489.79999 34.759998 m
495.75 34.759998 l
492.75 44.490002 l
h
489.79999 34.759998 m
f
512.21002 25.83 m
511.07037 25.823965 509.93787 26.009897 508.85999 26.379999 c
506.81818 27.071518 505.18359 28.625658 504.39001 30.629999 c
503.94052 31.765633 503.71964 32.978821 503.73999 34.200001 c
503.73999 34.459999 l
503.7215 35.681957 503.94583 36.895428 504.39999 38.029999 c
505.21567 40.079849 506.86731 41.684212 508.94 42.439999 c
509.99649 42.828979 511.11417 43.025421 512.23999 43.02 c
513.16992 43.021805 514.09668 42.910995 515 42.689999 c
515.86261 42.484268 516.67749 42.114185 517.40002 41.599998 c
518.11963 41.068947 518.71362 40.386158 519.14001 39.599998 c
519.63007 38.670479 519.91968 37.648453 519.98999 36.599998 c
515.66998 36.599998 l
515.59351 37.40913 515.2193 38.161045 514.62 38.709999 c
513.96442 39.200279 513.15741 39.444515 512.34003 39.400002 c
511.23798 39.445492 510.17743 38.976189 509.47 38.130001 c
508.69595 37.084274 508.31693 35.798378 508.39999 34.5 c
508.39999 34.25 l
508.30139 32.920464 508.67691 31.598972 509.45999 30.52 c
510.20712 29.652842 511.31775 29.186377 512.46002 29.26 c
513.3194 29.238745 514.15991 29.514198 514.84003 30.040001 c
515.53668 30.635359 515.95349 31.494314 515.98999 32.41 c
520.10999 32.41 l
520.06268 31.479574 519.83875 30.566656 519.45001 29.719999 c
519.08221 28.924887 518.5426 28.221304 517.87 27.66 c
517.16199 27.047626 516.33942 26.581953 515.45001 26.290001 c
514.40399 25.953516 513.30829 25.797953 512.21002 25.83 c
h
512.21002 25.83 m
f
529.21002 25.83 m
528.07037 25.823965 526.93787 26.009897 525.85999 26.379999 c
523.81311 27.063074 522.17542 28.620152 521.39001 30.629999 c
520.94049 31.765633 520.7196 32.978821 520.73999 34.200001 c
520.73999 34.459999 l
520.7215 35.681957 520.9458 36.895428 521.40002 38.029999 c
522.21558 40.076347 523.86249 41.679619 525.92999 42.439999 c
526.98999 42.828903 528.1109 43.025322 529.23999 43.02 c
530.16663 43.021782 531.09009 42.910969 531.98999 42.689999 c
532.85632 42.486202 533.67487 42.116009 534.40002 41.599998 c
535.11664 41.068573 535.70734 40.385704 536.13 39.599998 c
536.62939 38.674217 536.91949 37.650139 536.97998 36.599998 c
532.66998 36.599998 l
532.58893 37.407814 532.21552 38.15818 531.62 38.709999 c
530.96136 39.201763 530.1507 39.446033 529.33002 39.400002 c
528.23114 39.443886 527.17432 38.97459 526.46997 38.130001 c
525.69598 37.084274 525.31689 35.798378 525.40002 34.5 c
525.40002 34.25 l
525.28918 32.928185 525.64282 31.609104 526.40002 30.52 c
527.1499 29.656698 528.25854 29.191074 529.40002 29.26 c
530.25916 29.240374 531.09912 29.515654 531.78003 30.040001 c
532.47693 30.6341 532.89087 31.494667 532.91998 32.41 c
537.04999 32.41 l
536.9931 31.481009 536.76953 30.56983 536.39001 29.719999 c
536.01996 28.926254 535.48071 28.223131 534.81 27.66 c
534.10199 27.047626 533.27942 26.581953 532.39001 26.290001 c
531.36292 25.961134 530.28821 25.805672 529.21002 25.83 c
h
529.21002 25.83 m
f
546.33002 25.83 m
545.16217 25.818247 544.00128 26.011162 542.90002 26.4 c
541.8869 26.754923 540.96246 27.324593 540.19 28.07 c
539.40411 28.798107 538.78644 29.688787 538.38 30.68 c
537.93481 31.799129 537.71722 32.995789 537.73999 34.200001 c
537.73999 34.459999 l
537.72095 35.66391 537.93835 36.859852 538.38 37.98 c
538.79254 38.997154 539.40845 39.919334 540.19 40.689999 c
540.96265 41.432549 541.87311 42.016842 542.87 42.41 c
543.93549 42.820148 545.06836 43.02705 546.21002 43.02 c
547.22998 43.021042 548.24335 42.855534 549.21002 42.529999 c
550.15631 42.220341 551.02563 41.712368 551.76001 41.040001 c
552.52759 40.310623 553.12799 39.423615 553.52002 38.439999 c
553.98621 37.232117 554.21045 35.944374 554.17999 34.650002 c
554.17999 33.389999 l
542.32001 33.389999 l
542.29816 32.218433 542.7074 31.079655 543.46997 30.190001 c
544.96655 28.902948 547.11456 28.706217 548.82001 29.700001 c
549.34033 30.120914 549.69464 30.712603 549.82001 31.370001 c
554.13 31.370001 l
553.93652 29.715902 553.04956 28.221846 551.69 27.26 c
550.09119 26.247375 548.22076 25.748358 546.33002 25.83 c
h
549.79999 36.189999 m
549.81342 37.207039 549.45819 38.194557 548.79999 38.970001 c
547.31494 40.191658 545.16589 40.166325 543.71002 38.91 c
543.00409 38.167538 542.5675 37.209835 542.46997 36.189999 c
h
549.79999 36.189999 m
f
556.03003 42.650002 m
560.62 42.650002 l
560.62 40.040001 l
561.08929 40.907139 561.77924 41.634998 562.62 42.150002 c
563.6416 42.772511 564.82465 43.078705 566.02002 43.029999 c
566.78009 43.037609 567.53534 42.908905 568.25 42.650002 c
568.91144 42.404957 569.5119 42.01944 570.01001 41.52 c
570.52209 40.937805 570.90997 40.257263 571.15002 39.52 c
571.43536 38.597607 571.57043 37.635307 571.54999 36.669998 c
571.54999 26.190001 l
566.98999 26.190001 l
566.98999 36.009998 l
567.06287 36.898712 566.81842 37.784492 566.29999 38.509998 c
565.72015 39.093895 564.90924 39.387424 564.09003 39.310001 c
563.18872 39.342999 562.31 39.023788 561.64001 38.419998 c
560.93109 37.695183 560.56702 36.701214 560.64001 35.689999 c
560.64001 26.190001 l
556.08002 26.190001 l
h
556.03003 42.650002 m
f
580.20001 25.860001 m
578.74542 25.746792 577.30579 26.218279 576.20001 27.17 c
575.22821 28.222786 574.73584 29.63105 574.84003 31.059999 c
574.84003 39.400002 l
572.73999 39.400002 l
572.73999 42.650002 l
574.84003 42.650002 l
574.84003 46.209999 l
579.38 46.209999 l
579.38 42.650002 l
582.84003 42.650002 l
582.84003 39.41 l
579.38 39.41 l
579.38 31.48 l
579.34082 30.950956 579.50134 30.426439 579.83002 30.01 c
580.19867 29.663292 580.69507 29.48575 581.20001 29.52 c
581.51178 29.519159 581.823 29.545931 582.13 29.6 c
582.40411 29.652693 582.67218 29.733107 582.92999 29.84 c
582.92999 26.309999 l
582.62 26.209999 582.22998 26.110001 581.77002 26.01 c
581.2525 25.911222 580.72687 25.861004 580.20001 25.860001 c
h
580.20001 25.860001 m
f
590.34003 25.83 m
589.5849 25.822699 588.83411 25.94445 588.12 26.190001 c
587.45117 26.427166 586.84326 26.809679 586.34003 27.309999 c
585.81012 27.863043 585.40741 28.525135 585.15997 29.25 c
584.86194 30.145809 584.71991 31.086128 584.73999 32.029999 c
584.73999 42.650002 l
589.27002 42.650002 l
589.27002 32.650002 l
589.20679 31.767046 589.46228 30.890696 589.98999 30.18 c
590.54279 29.596403 591.32831 29.291737 592.13 29.35 c
593.02686 29.325804 593.89935 29.64403 594.57001 30.24 c
595.28571 30.960495 595.651 31.95768 595.57001 32.970001 c
595.57001 42.650002 l
600.09998 42.650002 l
600.09998 26.190001 l
595.62 26.190001 l
595.62 28.77 l
595.16455 27.890314 594.47168 27.155876 593.62 26.65 c
592.62915 26.064714 591.48969 25.77984 590.34003 25.83 c
h
590.34003 25.83 m
f
602.92999 42.650002 m
607.5 42.650002 l
607.5 39.5 l
607.9248 40.506405 608.61633 41.377728 609.5 42.02 c
610.48322 42.628998 611.62396 42.935055 612.78003 42.900002 c
612.78003 38.650002 l
611.40485 38.752579 610.03088 38.435253 608.84003 37.740002 c
607.84344 36.94585 607.32269 35.696869 607.46002 34.43 c
607.46002 26.190001 l
602.89001 26.190001 l
h
602.92999 42.650002 m
f
621.88 25.83 m
620.71216 25.818247 619.55127 26.011162 618.45001 26.4 c
617.43689 26.754923 616.51245 27.324593 615.73999 28.07 c
614.95416 28.798107 614.33649 29.688787 613.92999 30.68 c
613.4848 31.799129 613.26721 32.995789 613.28998 34.200001 c
613.28998 34.459999 l
613.27094 35.66391 613.4884 36.859852 613.92999 37.98 c
614.34253 38.997154 614.95844 39.919334 615.73999 40.689999 c
616.5127 41.432549 617.4231 42.016842 618.41998 42.41 c
619.48547 42.820148 620.61835 43.02705 621.76001 43.02 c
622.79675 43.026535 623.82745 42.86095 624.81 42.529999 c
625.75494 42.217293 626.62366 41.709679 627.35999 41.040001 c
628.12756 40.310623 628.72803 39.423615 629.12 38.439999 c
629.58618 37.232117 629.81049 35.944374 629.78003 34.650002 c
629.78003 33.389999 l
617.91998 33.389999 l
617.89996 32.220486 618.30505 31.083441 619.06 30.190001 c
620.55975 28.901232 622.71143 28.704527 624.41998 29.700001 c
624.94031 30.120914 625.29462 30.712603 625.41998 31.370001 c
629.72998 31.370001 l
629.5365 29.715902 628.64954 28.221846 627.28998 27.26 c
625.677 26.237431 623.7876 25.738005 621.88 25.83 c
h
625.34003 36.189999 m
625.35895 37.207962 625.00305 38.197372 624.34003 38.970001 c
622.85492 40.191658 620.70587 40.166325 619.25 38.91 c
618.54407 38.167538 618.10748 37.209835 618.01001 36.189999 c
h
625.34003 36.189999 m
f
ep
end
%%Trailer
%%EOF
