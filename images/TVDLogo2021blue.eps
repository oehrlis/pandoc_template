%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 651.000000 282.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 651 282
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 651 282
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.11764706 0.16078432 0.27450982 sc
q
0 0 651 282 rc
255.55 124.11 m
276.87 124.11 l
303.70001 196.82001 l
284.78 196.82001 l
267.26999 143.87 l
266.98999 143.87 l
248.92 196.82001 l
228.59 196.82001 l
255.55 124.11 l
h
255.55 124.11 m
f
323.92001 176.77 m
330.36642 181.7355 338.23459 184.50424 346.37 184.67 c
357.53 184.67 362.75 180.67 362.75 169 c
352.29999 169 l
344.39999 169 335.07999 168.3 327.88 164.77 c
320.67999 161.24001 315.45001 154.88 315.45001 144.00999 c
315.45001 130.17 328.01999 122.41 340.85999 122.41 c
349.48001 122.41 358.94 126.93 363.31 134.97 c
363.62 134.97 l
363.67899 131.33298 363.9595 127.70291 364.45999 124.1 c
381.13 124.1 l
380.70001 129.75 380.42001 134.83 380.28 140.34 c
380.14001 145.85001 380 151.21001 380 158.55 c
380 167.87 l
380 189.33 370.82001 198.50999 348.64999 198.50999 c
339.94263 198.38463 331.34918 196.51088 323.38 193 c
323.94 176.77 l
h
333.51999 145.14 m
333.51999 156.28999 346.09 157.71001 354.51999 157.71001 c
362.70999 157.71001 l
362.70999 152.06 361.85999 146.84 358.76001 142.71001 c
355.65305 138.51892 350.70587 136.09566 345.48999 136.21001 c
338.70999 136.21001 333.48999 138.89999 333.48999 145.11 c
h
333.51999 145.14 m
f
421.51999 160.64999 m
421.51999 170.39 424.91 183.81 437.19 183.81 c
449.47 183.81 454.13 170.81 454.13 160.64999 c
454.13 150.49001 450.04001 137.07001 437.47 137.07001 c
424.89999 137.07001 421.47 150.63 421.47 160.64999 c
h
454.84 124.08 m
473.19 124.08 l
473.19 230 l
454.26999 230 l
454.26999 188.35001 l
453.98999 188.35001 l
448.34 195.25999 441.70999 198.50999 432.25 198.50999 c
409.94 198.50999 401.75 180.72 401.75 160.67 c
401.75 140.62 409.94 122.41 432.25 122.41 c
441.14001 122.41 448.91 125.23 454.56 132.28999 c
454.84 132.28999 l
454.84 124.1 l
h
454.84 124.08 m
f
591.98999 195.83 m
586.06 197.10001 580.27002 198.50999 571.37 198.50999 c
556.54999 198.50999 542.84998 191.59 542.84998 175.92 c
542.84998 149.66 575.75 159.39999 575.75 145.14 c
575.75 138.08 568.13 136.24001 563.33002 136.24001 c
556.8255 136.35979 550.44031 138.00746 544.69 141.05 c
543.56 125.52 l
550.55023 123.56664 557.76282 122.52139 565.02002 122.41 c
580.40997 122.41 595.52002 129.19 595.52002 146.13 c
595.52002 172.39 562.62 165.05 562.62 176.63 c
562.62 182.84 568.69 184.63 573.77002 184.63 c
580.69 184.63 584.92999 183.50999 590.77002 181.53 c
592.03998 195.78999 l
h
591.98999 195.83 m
f
500.89999 124.11 m
519.82001 124.11 l
519.82001 196.82001 l
500.89999 196.82001 l
500.89999 124.11 l
h
500.89999 124.11 m
f
500.89001 210.09 m
519.76001 210.09 l
519.76001 228.96001 l
500.89001 228.96001 l
500.89001 210.09 l
h
500.89001 210.09 m
f
190.03 210.09 m
208.89 210.09 l
208.89 228.96001 l
190.03 228.96001 l
190.03 210.09 l
h
190.03 210.09 m
f
190.03 124.11 m
208.94 124.11 l
208.94 196.82001 l
190.03 196.82001 l
190.03 124.11 l
h
190.03 124.11 m
f
129.67999 124.1 m
148.17 124.1 l
148.17 150.78999 l
147.56 186.00999 166.3 178.39 166.3 178.39 c
166.3 198.39 l
166.3 198.60001 152.06 196.87 148.38 185.5 c
148.38 196.82001 l
129.67999 196.82001 l
h
129.67999 124.1 m
f
129.53 210.09 m
148.39999 210.09 l
148.39999 228.96001 l
129.53 228.96001 l
129.53 210.09 l
h
129.53 210.09 m
f
68.980003 145.99001 m
68.980003 131.59 77.169998 122.41 91.980003 122.41 c
96.703224 122.30601 101.4172 122.87505 105.98 124.1 c
105.41 139.10001 l
103.41 137.83 100.19 137.10001 96.800003 137.10001 c
89.599998 137.10001 87.910004 142.89 87.910004 149.10001 c
87.910004 182.98 l
104.71 182.98 l
104.71 196.82001 l
55.009998 196.82001 l
55.009998 182.98 l
69.010002 182.98 l
69.010002 145.98 l
h
68.980003 145.99001 m
f
68.879997 210.09 m
87.75 210.09 l
87.75 228.96001 l
68.879997 228.96001 l
68.879997 210.09 l
h
68.879997 210.09 m
f
0.0039215689 0.0039215689 0.0039215689 sc
57.009998 86.410004 m
66.889999 86.410004 l
68.47113 86.418831 70.047012 86.227303 71.580002 85.839996 c
72.978516 85.50808 74.295105 84.895714 75.449997 84.040001 c
76.561455 83.202446 77.462021 82.116974 78.080002 80.870003 c
78.774857 79.416817 79.117455 77.820328 79.080002 76.209999 c
79.080002 76.010002 l
79.119118 74.377014 78.776711 72.757423 78.080002 71.279999 c
77.468132 70.023521 76.566757 68.930222 75.449997 68.089996 c
74.295784 67.23098 72.979202 66.615211 71.580002 66.279999 c
70.045692 65.900917 68.470428 65.712822 66.889999 65.720001 c
61.240002 65.720001 l
61.240002 51.599998 l
57.009998 51.599998 l
h
67.18 69.129997 m
69.23175 68.983604 71.263344 69.615578 72.870003 70.900002 c
74.235443 72.248955 74.947105 74.124809 74.82 76.040001 c
74.82 76.230003 l
74.82 78.699997 74.139999 80.440002 72.82 81.470001 c
71.168282 82.572998 69.203102 83.109917 67.220001 83 c
61.279999 83 l
61.279999 69.129997 l
h
67.18 69.129997 m
f
90.489998 51.169998 m
89.372215 51.161644 88.258545 51.30632 87.18 51.599998 c
86.196121 51.868103 85.277351 52.334293 84.480003 52.970001 c
83.707863 53.596992 83.091713 54.394569 82.68 55.299999 c
82.216057 56.357983 81.990723 57.505135 82.019997 58.66 c
81.977585 59.975307 82.352097 61.270351 83.089996 62.360001 c
83.833153 63.387749 84.81002 64.224075 85.940002 64.800003 c
87.228134 65.447845 88.607193 65.896294 90.029999 66.129997 c
91.59417 66.412132 93.180588 66.552704 94.769997 66.550003 c
98.43 66.550003 l
98.43 68.379997 l
98.43 70.379997 98 71.870003 97.160004 72.760002 c
96.32 73.650002 94.919998 74.089996 92.970001 74.089996 c
89.470001 74.089996 87.523331 72.580002 87.129997 69.559998 c
83.129997 69.559998 l
83.210876 70.860878 83.587059 72.126228 84.230003 73.260002 c
84.800728 74.240219 85.583092 75.080658 86.519997 75.720001 c
87.464821 76.361824 88.518707 76.826073 89.629997 77.089996 c
90.803581 77.36396 92.004868 77.501541 93.209999 77.5 c
94.388725 77.501328 95.563492 77.363708 96.709999 77.089996 c
97.810432 76.83918 98.837471 76.33593 99.709999 75.620003 c
100.58531 74.858864 101.27026 73.903366 101.71 72.830002 c
102.26895 71.422104 102.5311 69.913933 102.48 68.400002 c
102.48 51.599998 l
98.480003 51.599998 l
98.480003 54.82 l
97.605751 53.678947 96.488815 52.746464 95.209999 52.09 c
93.729019 51.422333 92.113319 51.107407 90.489998 51.169998 c
h
90.879997 54.380001 m
91.894478 54.372265 92.9048 54.510342 93.879997 54.790001 c
94.744186 55.038334 95.554642 55.445255 96.269997 55.990002 c
97.666359 57.069588 98.470818 58.745239 98.440002 60.509998 c
98.440002 63.650002 l
94.919998 63.650002 l
93.737946 63.656208 92.557358 63.565907 91.389999 63.380001 c
90.413422 63.236408 89.463257 62.950012 88.57 62.529999 c
87.828857 62.187943 87.190811 61.656811 86.720001 60.990002 c
86.258514 60.291756 86.027679 59.466343 86.059998 58.630001 c
85.996529 57.484257 86.380119 56.358582 87.129997 55.490002 c
87.849998 54.75 89.099998 54.380001 90.879997 54.380001 c
h
90.879997 54.380001 m
f
109.77 77.059998 m
113.77 77.059998 l
113.77 72.489998 l
114.14373 73.200417 114.5894 73.870598 115.1 74.489998 c
116.14125 75.73951 117.53537 76.645683 119.1 77.089996 c
120.07675 77.365837 121.08517 77.513741 122.1 77.529999 c
122.1 73.650002 l
120.93411 73.599426 119.77563 73.438713 118.64 73.169998 c
117.66602 72.942116 116.75864 72.490135 115.99 71.849998 c
115.22778 71.188103 114.64915 70.34082 114.31 69.389999 c
113.88692 68.145035 113.69048 66.834297 113.73 65.519997 c
113.73 51.52 l
109.73 51.52 l
h
109.77 77.059998 m
f
135.42 51.259998 m
133.08 51.259998 131.35001 51.876667 130.23 53.110001 c
129.0713 54.460754 128.47058 56.202129 128.55 57.98 c
128.55 73.650002 l
124.9 73.650002 l
124.9 77.059998 l
128.55 77.059998 l
128.55 82.849998 l
132.55 82.849998 l
132.55 77.059998 l
138.49001 77.059998 l
138.49001 73.650002 l
132.62 73.650002 l
132.62 58.369999 l
132.62 55.896667 133.67667 54.663334 135.78999 54.669998 c
136.36024 54.663513 136.9297 54.71376 137.49001 54.82 c
137.97075 54.907417 138.44266 55.037945 138.89999 55.209999 c
138.89999 51.799999 l
138.44215 51.629482 137.9704 51.498993 137.49001 51.41 c
136.80614 51.29604 136.11316 51.245823 135.42 51.259998 c
h
135.42 51.259998 m
f
166.56 51.169998 m
164.84282 51.161327 163.14175 51.501541 161.56 52.169998 c
160.07661 52.792503 158.73592 53.711258 157.62 54.869999 c
156.4904 56.051041 155.61264 57.449341 155.03999 58.98 c
154.40967 60.626602 154.09419 62.376942 154.11 64.139999 c
154.11 64.529999 l
154.10555 66.330994 154.44496 68.116287 155.11 69.790001 c
155.70453 71.316658 156.59106 72.712715 157.72 73.900002 c
158.82094 75.045692 160.1494 75.948364 161.62 76.550003 c
164.83295 77.816956 168.40706 77.816956 171.62 76.550003 c
173.12303 75.954308 174.48537 75.051765 175.62 73.900002 c
176.74745 72.721115 177.63103 71.331192 178.22 69.809998 c
178.86795 68.132942 179.19037 66.347763 179.17 64.550003 c
179.17 64.160004 l
179.18759 62.355968 178.86531 60.564762 178.22 58.880001 c
177.63406 57.344341 176.73889 55.945427 175.59 54.77 c
174.45168 53.622707 173.09035 52.720825 171.59 52.119999 c
169.99394 51.469463 168.28339 51.146397 166.56 51.169998 c
h
166.61 54.57 m
167.7979 54.555538 168.97594 54.78706 170.07001 55.25 c
171.0845 55.685272 171.9846 56.349232 172.7 57.189999 c
173.4369 58.075207 173.99702 59.093632 174.35001 60.189999 c
174.75481 61.446449 174.95404 62.760025 174.94 64.080002 c
174.94 64.419998 l
174.95854 65.776306 174.75935 67.126808 174.35001 68.419998 c
174.00249 69.54303 173.43098 70.583977 172.67 71.480003 c
171.95013 72.313484 171.05103 72.973289 170.03999 73.410004 c
168.95703 73.874763 167.78838 74.106453 166.61 74.089996 c
165.42534 74.104523 164.25055 73.872978 163.16 73.410004 c
162.14468 72.980804 161.24397 72.319824 160.53 71.480003 c
159.78661 70.597626 159.22272 69.578545 158.87 68.480003 c
158.46114 67.18692 158.26524 65.83596 158.28999 64.480003 c
158.28999 64.089996 l
158.14857 61.563633 158.93843 59.073105 160.50999 57.09 c
162.05656 55.363262 164.30583 54.435577 166.62 54.57 c
h
166.61 54.57 m
f
185.62 73.650002 m
181.97 73.650002 l
181.97 77.059998 l
185.62 77.059998 l
185.62 81.199997 l
185.493 83.365715 186.16953 85.502151 187.52 87.199997 c
189.01237 88.717567 191.09763 89.50045 193.22 89.339996 c
193.75587 89.348976 194.29146 89.308807 194.82001 89.220001 c
195.29767 89.127975 195.76869 89.004372 196.23 88.849998 c
196.23 85.400002 l
195.81656 85.579514 195.38365 85.710388 194.94 85.790001 c
194.41954 85.891792 193.89032 85.942039 193.36 85.940002 c
192.26938 86.044426 191.20018 85.58889 190.52 84.730003 c
189.9127 83.794998 189.61208 82.693886 189.66 81.580002 c
189.66 77.029999 l
195.89 77.029999 l
195.89 73.650002 l
189.66 73.650002 l
189.66 51.599998 l
185.66 51.599998 l
h
185.62 73.650002 m
f
221.03 86.410004 m
231.3 86.410004 l
242.62 51.599998 l
234.39 51.599998 l
232.00999 59.34 l
219.37 59.34 l
216.99001 51.599998 l
209.62 51.599998 l
h
221.03 64.940002 m
230.22 64.940002 l
225.64999 79.940002 l
h
221.03 64.940002 m
f
255.67999 51.07 m
253.91733 51.053604 252.16501 51.341148 250.5 51.919998 c
247.34531 52.991791 244.81946 55.393349 243.59 58.490002 c
242.89366 60.248901 242.55376 62.128628 242.59 64.019997 c
242.59 64.410004 l
242.55534 66.297997 242.89523 68.174141 243.59 69.93 c
244.23196 71.511543 245.19177 72.94445 246.41 74.139999 c
247.61717 75.280174 249.04239 76.164558 250.60001 76.739998 c
252.23444 77.348228 253.96611 77.653221 255.71001 77.639999 c
257.14542 77.642975 258.57587 77.471718 259.97 77.129997 c
261.30511 76.810387 262.56744 76.240303 263.69 75.449997 c
264.79596 74.637833 265.71072 73.593376 266.37 72.389999 c
267.12939 70.956764 267.5759 69.378647 267.67999 67.760002 c
261.01999 67.760002 l
260.89368 69.012321 260.31396 70.175285 259.39001 71.029999 c
258.375 71.789169 257.12567 72.167862 255.86 72.099998 c
254.15288 72.157394 252.51599 71.418388 251.42999 70.099998 c
250.22701 68.490791 249.63832 66.504837 249.77 64.5 c
249.77 64.110001 l
249.62305 62.052242 250.1996 60.007793 251.39999 58.330002 c
252.55264 57.009277 254.24969 56.293564 256 56.389999 c
257.32886 56.361286 258.6275 56.788284 259.67999 57.599998 c
260.76175 58.51424 261.405 59.844372 261.45001 61.259998 c
267.82999 61.259998 l
267.75702 59.823391 267.41794 58.412819 266.82999 57.099998 c
266.2576 55.872311 265.42502 54.783817 264.39001 53.91 c
263.2934 52.966358 262.02292 52.246189 260.64999 51.790001 c
259.04425 51.27808 257.36499 51.034809 255.67999 51.07 c
h
255.67999 51.07 m
f
281.95999 51.07 m
280.19745 51.055195 278.4454 51.342693 276.78 51.919998 c
273.62531 52.991791 271.09946 55.393349 269.87 58.490002 c
269.17368 60.248901 268.83374 62.128628 268.87 64.019997 c
268.87 64.410004 l
268.83536 66.297997 269.17523 68.174141 269.87 69.93 c
270.51917 71.510155 271.48187 72.942322 272.70001 74.139999 c
273.90356 75.279915 275.32547 76.164352 276.88 76.739998 c
278.51468 77.347359 280.24619 77.652328 281.98999 77.639999 c
283.42542 77.642975 284.85587 77.471718 286.25 77.129997 c
287.58743 76.808159 288.85266 76.238304 289.98001 75.449997 c
291.08301 74.637451 291.99442 73.592926 292.64999 72.389999 c
293.41287 70.957542 293.86279 69.379387 293.97 67.760002 c
287.32001 67.760002 l
287.19733 69.013367 286.617 70.177559 285.69 71.029999 c
284.67578 71.790718 283.42587 72.169586 282.16 72.099998 c
280.45288 72.157394 278.81601 71.418388 277.73001 70.099998 c
276.53455 68.487457 275.94986 66.50312 276.07999 64.5 c
276.07999 64.110001 l
276.07999 61.549999 276.62 59.630001 277.70999 58.330002 c
278.86172 57.008026 280.55942 56.292038 282.31 56.389999 c
283.6358 56.361153 284.93134 56.788288 285.98001 57.599998 c
287.05844 58.51786 287.70386 59.844944 287.76001 61.259998 c
294.13 61.259998 l
294.05704 59.823391 293.71796 58.412819 293.13 57.099998 c
292.56107 55.87294 291.73187 54.784412 290.70001 53.91 c
289.59839 52.96817 288.32498 52.248283 286.95001 51.790001 c
285.33789 51.275894 283.6517 51.032597 281.95999 51.07 c
h
281.95999 51.07 m
f
308.44 51.07 m
306.63541 51.050312 304.8414 51.348183 303.14001 51.950001 c
299.98633 53.079697 297.44843 55.476196 296.14001 58.560001 c
295.44919 60.296055 295.10931 62.151806 295.14001 64.019997 c
295.14001 64.410004 l
295.11688 66.274315 295.45651 68.125343 296.14001 69.860001 c
296.77637 71.430832 297.72952 72.853737 298.94 74.040001 c
300.13144 75.190559 301.53836 76.094513 303.07999 76.699997 c
304.72464 77.338409 306.47589 77.65744 308.23999 77.639999 c
309.84363 77.647888 311.43781 77.394577 312.95999 76.889999 c
314.42123 76.405777 315.76382 75.618622 316.89999 74.580002 c
318.09357 73.464066 319.02579 72.098167 319.63 70.580002 c
320.34451 68.711174 320.6843 66.720016 320.63 64.720001 c
320.63 62.720001 l
302.31 62.720001 l
302.28323 60.911724 302.91599 59.155602 304.09 57.779999 c
306.40292 55.787865 309.72644 55.486458 312.35999 57.029999 c
313.1832 57.668976 313.745 58.58633 313.94 59.610001 c
320.62 59.610001 l
320.31876 57.052433 318.94913 54.741848 316.85001 53.25 c
314.33902 51.672398 311.40118 50.91087 308.44 51.07 c
h
313.79999 67.07 m
313.81235 68.655899 313.23907 70.19059 312.19 71.379997 c
309.89783 73.272514 306.5733 73.230217 304.32999 71.279999 c
303.23459 70.132637 302.55814 68.649376 302.41 67.07 c
h
313.79999 67.07 m
f
323.42999 77.059998 m
330.48999 77.059998 l
330.48999 73.059998 l
331.19305 74.386551 332.22632 75.509369 333.48999 76.32 c
335.06815 77.28849 336.90018 77.762169 338.75 77.68 c
339.92554 77.69603 341.09433 77.499542 342.20001 77.099998 c
343.22574 76.720711 344.1571 76.12368 344.92999 75.349998 c
345.72293 74.453651 346.31909 73.401009 346.67999 72.260002 c
347.12625 70.833549 347.33899 69.344345 347.31 67.849998 c
347.31 51.639999 l
340.25 51.639999 l
340.25 66.790001 l
340.36459 68.166168 339.98526 69.538155 339.17999 70.660004 c
338.28806 71.559334 337.04147 72.013969 335.78 71.900002 c
334.2901 72.00383 332.83179 71.436195 331.80417 70.35244 c
330.77652 69.268677 330.28717 67.78228 330.47 66.300003 c
330.47 51.599998 l
323.41 51.599998 l
h
323.42999 77.059998 m
f
360.81 51.119999 m
358.14334 51.119999 356.10001 51.786667 354.67999 53.119999 c
353.28 54.459999 352.59 56.470001 352.59 59.119999 c
352.59 72.050003 l
349.32999 72.050003 l
349.32999 77.050003 l
352.62 77.050003 l
352.62 82.550003 l
359.62 82.550003 l
359.62 77.050003 l
364.97 77.050003 l
364.97 72.050003 l
359.62 72.050003 l
359.62 59.779999 l
359.55606 58.964905 359.80652 58.156246 360.32001 57.52 c
360.88782 56.978954 361.65778 56.702934 362.44 56.759998 c
362.92316 56.754906 363.40558 56.798458 363.88 56.889999 c
364.30453 56.967419 364.72003 57.088047 365.12 57.25 c
365.12 51.799999 l
364.52667 51.609688 363.92221 51.456066 363.31 51.34 c
362.48648 51.180569 361.64868 51.106842 360.81 51.119999 c
h
360.81 51.119999 m
f
376.48999 51.07 m
375.31992 51.060677 374.15671 51.250034 373.04999 51.630001 c
372.0144 51.99152 371.07422 52.582996 370.29999 53.360001 c
369.4809 54.214607 368.85959 55.238754 368.48001 56.360001 c
368.01279 57.74778 367.78949 59.206001 367.82001 60.669998 c
367.82001 77.07 l
374.82001 77.07 l
374.82001 61.650002 l
374.71848 60.283054 375.11642 58.925709 375.94 57.830002 c
376.7934 56.924416 378.00888 56.450714 379.25 56.540001 c
380.73822 56.439308 382.19366 57.008316 383.21899 58.091671 c
384.24429 59.175022 384.73239 60.659576 384.54999 62.139999 c
384.54999 77.059998 l
391.54999 77.059998 l
391.54999 51.599998 l
384.54999 51.599998 l
384.54999 55.599998 l
383.88153 54.27367 382.86536 53.153809 381.60999 52.360001 c
380.06558 51.440067 378.28592 50.99168 376.48999 51.07 c
h
376.48999 51.07 m
f
395.95001 77.059998 m
403.01001 77.059998 l
403.01001 72.190002 l
403.69293 73.750832 404.7847 75.098267 406.17001 76.089996 c
407.69208 77.026077 409.4538 77.49865 411.23999 77.449997 c
411.23999 70.879997 l
409.11426 71.034752 406.99142 70.543251 405.14999 69.470001 c
403.72333 68.489998 403.01001 66.786667 403.01001 64.360001 c
403.01001 51.599998 l
395.95001 51.599998 l
h
395.95001 77.059998 m
f
425.25 51.07 m
423.4454 51.050312 421.6514 51.348183 419.95001 51.950001 c
416.79633 53.079697 414.25842 55.476196 412.95001 58.560001 c
412.25919 60.296055 411.91931 62.151806 411.95001 64.019997 c
411.95001 64.410004 l
411.92688 66.274315 412.26651 68.125343 412.95001 69.860001 c
413.58636 71.430832 414.53952 72.853737 415.75 74.040001 c
416.94144 75.190559 418.34836 76.094513 419.89001 76.699997 c
421.53464 77.338409 423.28589 77.65744 425.04999 77.639999 c
426.65363 77.647888 428.2478 77.394577 429.76999 76.889999 c
431.23236 76.408272 432.57544 75.620827 433.70999 74.580002 c
434.90356 73.464066 435.83578 72.098167 436.44 70.580002 c
437.15451 68.711174 437.49429 66.720016 437.44 64.720001 c
437.44 62.720001 l
419.12 62.720001 l
419.09323 60.911724 419.72598 59.155602 420.89999 57.779999 c
423.21292 55.787865 426.53644 55.486458 429.17001 57.029999 c
429.996 57.666454 430.5585 58.584972 430.75 59.610001 c
437.42001 59.610001 l
437.11874 57.052433 435.74911 54.741848 433.64999 53.25 c
431.14236 51.673187 428.20795 50.911636 425.25 51.07 c
h
430.60999 67.07 m
430.62234 68.655899 430.04907 70.19059 429 71.379997 c
426.70782 73.272514 423.3833 73.230217 421.14001 71.279999 c
420.04459 70.132637 419.36813 68.649376 419.22 67.07 c
h
430.60999 67.07 m
f
ep
end
%%Trailer
%%EOF
