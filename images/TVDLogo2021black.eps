%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 651.000000 282.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 651 282
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 651 282
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.0039215689 0.0039215689 0.0039215689 sc
q
0 0 651 282 rc
255.94 124.11 m
277.26001 124.11 l
304.09 196.82001 l
285.17001 196.82001 l
267.66 143.87 l
267.38 143.87 l
249.31 196.82001 l
228.98 196.82001 l
255.94 124.11 l
h
255.94 124.11 m
f
324.31 176.77 m
330.75644 181.7355 338.62457 184.50424 346.76001 184.67 c
357.92001 184.67 363.14001 180.67 363.14001 169 c
352.69 169 l
344.79001 169 335.47 168.3 328.26999 164.77 c
321.07001 161.24001 315.84 154.88 315.84 144.00999 c
315.84 130.17 328.41 122.41 341.25 122.41 c
349.87 122.41 359.32999 126.93 363.70001 134.97 c
363.98999 134.97 l
364.04898 131.33298 364.32953 127.70291 364.82999 124.1 c
381.5 124.1 l
381.07001 129.75 380.79001 134.83 380.64999 140.34 c
380.51001 145.85001 380.37 151.21001 380.37 158.55 c
380.37 167.87 l
380.37 189.33 371.19 198.50999 349.01999 198.50999 c
340.31262 198.38463 331.71918 196.51088 323.75 193 c
324.31 176.77 l
h
333.91 145.14 m
333.91 156.28999 346.48001 157.71001 354.91 157.71001 c
363.10001 157.71001 l
363.10001 152.06 362.25 146.84 359.10001 142.71001 c
355.99304 138.51892 351.04587 136.09566 345.82999 136.21001 c
339.04999 136.21001 333.82999 138.89999 333.82999 145.11 c
h
333.91 145.14 m
f
421.91 160.64999 m
421.91 170.39 425.29999 183.81 437.57999 183.81 c
449.85999 183.81 454.51999 170.81 454.51999 160.64999 c
454.51999 150.49001 450.42999 137.07001 437.85999 137.07001 c
425.29001 137.07001 421.85999 150.63 421.85999 160.64999 c
h
455.23001 124.08 m
473.62 124.08 l
473.62 230 l
454.62 230 l
454.62 188.35001 l
454.34 188.35001 l
448.69 195.25999 442.06 198.50999 432.60001 198.50999 c
410.29001 198.50999 402.10001 180.72 402.10001 160.67 c
402.10001 140.62 410.29001 122.41 432.60001 122.41 c
441.48999 122.41 449.26001 125.23 454.91 132.28999 c
455.19 132.28999 l
455.19 124.1 l
h
455.23001 124.08 m
f
592.38 195.83 m
586.45001 197.10001 580.65997 198.50999 571.76001 198.50999 c
556.94 198.50999 543.23999 191.59 543.23999 175.92 c
543.23999 149.66 576.14001 159.39999 576.14001 145.14 c
576.14001 138.08 568.52002 136.24001 563.71997 136.24001 c
557.21552 136.35979 550.83032 138.00746 545.08002 141.05 c
543.95001 125.52 l
550.94025 123.56664 558.15283 122.52139 565.40997 122.41 c
580.79999 122.41 595.90997 129.19 595.90997 146.13 c
595.90997 172.39 563.01001 165.05 563.01001 176.63 c
563.01001 182.84 569.08002 184.63 574.15997 184.63 c
581.08002 184.63 585.32001 183.50999 591.15997 181.53 c
592.42999 195.78999 l
h
592.38 195.83 m
f
501.29001 124.11 m
520.21002 124.11 l
520.21002 196.82001 l
501.29001 196.82001 l
501.29001 124.11 l
h
501.29001 124.11 m
f
501.28 210.09 m
520.15002 210.09 l
520.15002 228.96001 l
501.28 228.96001 l
501.28 210.09 l
h
501.28 210.09 m
f
190.41 210.09 m
209.28 210.09 l
209.28 228.96001 l
190.41 228.96001 l
190.41 210.09 l
h
190.41 210.09 m
f
190.41 124.11 m
209.34 124.11 l
209.34 196.82001 l
190.41 196.82001 l
190.41 124.11 l
h
190.41 124.11 m
f
130.07001 124.1 m
148.56 124.1 l
148.56 150.78999 l
147.95 186.00999 166.69 178.39 166.69 178.39 c
166.69 198.39 l
166.69 198.60001 152.45 196.87 148.77 185.5 c
148.77 196.82001 l
130.08 196.82001 l
130.08 124.1 l
h
130.07001 124.1 m
f
129.92 210.09 m
148.78999 210.09 l
148.78999 228.96001 l
129.92 228.96001 l
129.92 210.09 l
h
129.92 210.09 m
f
69.370003 145.99001 m
69.370003 131.59 77.559998 122.41 92.370003 122.41 c
97.093224 122.30601 101.8072 122.87505 106.37 124.1 c
105.8 139.10001 l
103.8 137.83 100.58 137.10001 97.190002 137.10001 c
89.989998 137.10001 88.300003 142.89 88.300003 149.10001 c
88.300003 182.98 l
105.1 182.98 l
105.1 196.82001 l
55.400002 196.82001 l
55.400002 182.98 l
69.400002 182.98 l
69.400002 145.98 l
h
69.370003 145.99001 m
f
69.269997 210.09 m
88.139999 210.09 l
88.139999 228.96001 l
69.269997 228.96001 l
69.269997 210.09 l
h
69.269997 210.09 m
f
57.400002 86.410004 m
67.279999 86.410004 l
68.86113 86.418831 70.437012 86.227303 71.970001 85.839996 c
73.368515 85.50808 74.685104 84.895714 75.839996 84.040001 c
76.951454 83.202446 77.85202 82.116974 78.470001 80.870003 c
79.164856 79.416817 79.507454 77.820328 79.470001 76.209999 c
79.470001 76.010002 l
79.509117 74.377014 79.16671 72.757423 78.470001 71.279999 c
77.858131 70.023521 76.956757 68.930222 75.839996 68.089996 c
74.685791 67.23098 73.369202 66.615211 71.970001 66.279999 c
70.435692 65.900917 68.860428 65.712822 67.279999 65.720001 c
61.619999 65.720001 l
61.619999 51.599998 l
57.389999 51.599998 l
h
67.620003 69.129997 m
69.671745 68.983604 71.703339 69.615578 73.309998 70.900002 c
74.693771 72.240067 75.424133 74.117096 75.309998 76.040001 c
75.309998 76.230003 l
75.309998 78.699997 74.629997 80.440002 73.309998 81.470001 c
71.658287 82.572998 69.6931 83.109917 67.709999 83 c
61.619999 83 l
61.619999 69.129997 l
h
67.620003 69.129997 m
f
90.879997 51.169998 m
89.762215 51.161644 88.648544 51.30632 87.57 51.599998 c
86.586121 51.868103 85.667351 52.334293 84.870003 52.970001 c
84.097862 53.596992 83.481712 54.394569 83.07 55.299999 c
82.606056 56.357983 82.38073 57.505135 82.410004 58.66 c
82.367584 59.975307 82.742096 61.270351 83.480003 62.360001 c
84.223152 63.387749 85.20002 64.224075 86.330002 64.800003 c
87.618134 65.447845 88.997192 65.896294 90.419998 66.129997 c
91.984169 66.412132 93.570587 66.552704 95.160004 66.550003 c
98.82 66.550003 l
98.82 68.379997 l
98.82 70.379997 98.389999 71.870003 97.550003 72.760002 c
96.709999 73.650002 95.309998 74.089996 93.360001 74.089996 c
89.860001 74.089996 87.91333 72.580002 87.519997 69.559998 c
83.519997 69.559998 l
83.600876 70.860878 83.977058 72.126228 84.620003 73.260002 c
85.190727 74.240219 85.973091 75.080658 86.910004 75.720001 c
87.85482 76.361824 88.908707 76.826073 90.019997 77.089996 c
91.193581 77.36396 92.394867 77.501541 93.599998 77.5 c
94.778725 77.501328 95.953491 77.363708 97.099998 77.089996 c
98.200432 76.83918 99.22747 76.33593 100.1 75.620003 c
100.97531 74.858864 101.66026 73.903366 102.1 72.830002 c
102.65895 71.422104 102.9211 69.913933 102.87 68.400002 c
102.87 51.599998 l
98.870003 51.599998 l
98.870003 54.82 l
97.99575 53.678947 96.878815 52.746464 95.599998 52.09 c
94.119019 51.422333 92.503319 51.107407 90.879997 51.169998 c
h
91.269997 54.380001 m
92.284477 54.372265 93.2948 54.510342 94.269997 54.790001 c
95.134186 55.038334 95.944641 55.445255 96.660004 55.990002 c
98.056358 57.069588 98.860817 58.745239 98.830002 60.509998 c
98.830002 63.650002 l
95.32 63.650002 l
94.137947 63.656208 92.957359 63.565907 91.790001 63.380001 c
90.813423 63.236408 89.863258 62.950012 88.970001 62.529999 c
88.228851 62.187943 87.590813 61.656811 87.120003 60.990002 c
86.658516 60.291756 86.427673 59.466343 86.459999 58.630001 c
86.39653 57.484257 86.780121 56.358582 87.529999 55.490002 c
88.256668 54.75 89.503334 54.380001 91.269997 54.380001 c
h
91.269997 54.380001 m
f
110.16 77.059998 m
114.16 77.059998 l
114.16 72.489998 l
114.53373 73.200417 114.9794 73.870598 115.49 74.489998 c
116.53126 75.73951 117.92537 76.645683 119.49 77.089996 c
120.46675 77.365837 121.47517 77.513741 122.49 77.529999 c
122.49 73.650002 l
121.32411 73.599426 120.16563 73.438713 119.03 73.169998 c
118.05602 72.942116 117.14864 72.490135 116.38 71.849998 c
115.61779 71.188103 115.03915 70.34082 114.7 69.389999 c
114.27692 68.145035 114.08047 66.834297 114.12 65.519997 c
114.12 51.52 l
110.12 51.52 l
h
110.16 77.059998 m
f
135.81 51.259998 m
133.47 51.259998 131.74001 51.876667 130.62 53.110001 c
129.4613 54.460754 128.86058 56.202129 128.94 57.98 c
128.94 73.650002 l
125.29 73.650002 l
125.29 77.059998 l
128.94 77.059998 l
128.94 82.849998 l
132.94 82.849998 l
132.94 77.059998 l
138.88 77.059998 l
138.88 73.650002 l
132.94 73.650002 l
132.94 58.369999 l
132.94 55.896667 133.99667 54.663334 136.11 54.669998 c
136.68024 54.663513 137.24971 54.71376 137.81 54.82 c
138.29076 54.907417 138.76266 55.037945 139.22 55.209999 c
139.22 51.799999 l
138.76216 51.629482 138.29039 51.498993 137.81 51.41 c
137.14915 51.300289 136.47981 51.250088 135.81 51.259998 c
h
135.81 51.259998 m
f
166.95 51.169998 m
165.23282 51.161327 163.53175 51.501541 161.95 52.169998 c
160.46661 52.792503 159.12592 53.711258 158.00999 54.869999 c
156.8804 56.051041 156.00264 57.449341 155.42999 58.98 c
154.79967 60.626602 154.48419 62.376942 154.5 64.139999 c
154.5 64.529999 l
154.49554 66.330994 154.83496 68.116287 155.5 69.790001 c
156.09453 71.316658 156.98106 72.712715 158.11 73.900002 c
159.21968 75.061134 160.56239 75.974449 162.05 76.580002 c
165.26294 77.846954 168.83705 77.846954 172.05 76.580002 c
173.55304 75.984306 174.91536 75.081764 176.05 73.93 c
177.17746 72.751114 178.06102 71.361198 178.64999 69.839996 c
179.31503 68.166283 179.65445 66.380997 179.64999 64.580002 c
179.64999 64.190002 l
179.65164 62.382778 179.31238 60.591461 178.64999 58.91 c
178.06406 57.37434 177.16888 55.975426 176.02 54.799999 c
174.88168 53.652706 173.52036 52.750824 172.02 52.150002 c
170.41364 51.483898 168.68887 51.150513 166.95 51.169998 c
h
167 54.57 m
168.1879 54.555538 169.36594 54.78706 170.46001 55.25 c
171.4745 55.685272 172.37462 56.349232 173.09 57.189999 c
173.8269 58.075207 174.38702 59.093632 174.74001 60.189999 c
175.14481 61.446449 175.34404 62.760025 175.33 64.080002 c
175.33 64.419998 l
175.34854 65.776306 175.14935 67.126808 174.74001 68.419998 c
174.39249 69.54303 173.82098 70.583977 173.06 71.480003 c
172.34015 72.313484 171.44102 72.973289 170.42999 73.410004 c
169.34703 73.874763 168.17838 74.106453 167 74.089996 c
165.81534 74.104523 164.64055 73.872978 163.55 73.410004 c
162.53468 72.980804 161.63397 72.319824 160.92 71.480003 c
160.17661 70.597626 159.61272 69.578545 159.25999 68.480003 c
158.85114 67.18692 158.65524 65.83596 158.67999 64.480003 c
158.67999 64.089996 l
158.53857 61.563633 159.32843 59.073105 160.89999 57.09 c
162.44432 55.366089 164.68925 54.438679 167 54.57 c
h
167 54.57 m
f
186.03 73.650002 m
182.38 73.650002 l
182.38 77.059998 l
186.03 77.059998 l
186.03 81.199997 l
185.90298 83.365715 186.57953 85.502151 187.92999 87.199997 c
189.42238 88.717567 191.50763 89.50045 193.63 89.339996 c
194.16588 89.348976 194.70145 89.308807 195.23 89.220001 c
195.70766 89.127975 196.1787 89.004372 196.64 88.849998 c
196.64 85.400002 l
196.22655 85.579514 195.79366 85.710388 195.35001 85.790001 c
194.82954 85.891792 194.30032 85.942039 193.77 85.940002 c
192.67938 86.044426 191.61018 85.58889 190.92999 84.730003 c
190.32269 83.794998 190.02208 82.693886 190.07001 81.580002 c
190.07001 77.029999 l
196.3 77.029999 l
196.3 73.650002 l
190.07001 73.650002 l
190.07001 51.599998 l
186.07001 51.599998 l
h
186.03 73.650002 m
f
221.42 86.410004 m
231.69 86.410004 l
242.98 51.599998 l
234.75 51.599998 l
232.37 59.34 l
219.75999 59.34 l
217.38 51.599998 l
209.98 51.599998 l
h
221.42 64.940002 m
230.62 64.940002 l
226.05 79.940002 l
h
221.42 64.940002 m
f
256.07001 51.07 m
254.30733 51.053604 252.55501 51.341148 250.89 51.919998 c
247.73531 52.991791 245.20946 55.393349 243.98 58.490002 c
243.28366 60.248901 242.94376 62.128628 242.98 64.019997 c
242.98 64.410004 l
242.94534 66.297997 243.28523 68.174141 243.98 69.93 c
244.62196 71.511543 245.58177 72.94445 246.8 74.139999 c
248.00717 75.280174 249.43239 76.164558 250.99001 76.739998 c
252.62444 77.348228 254.35611 77.653221 256.10001 77.639999 c
257.5354 77.642975 258.96585 77.471718 260.35999 77.129997 c
261.69513 76.810387 262.95746 76.240303 264.07999 75.449997 c
265.18597 74.637833 266.10071 73.593376 266.76001 72.389999 c
267.51941 70.956764 267.96591 69.378647 268.07001 67.760002 c
261.41 67.760002 l
261.28369 69.012321 260.70398 70.175285 259.78 71.029999 c
258.76501 71.789169 257.51569 72.167862 256.25 72.099998 c
254.54289 72.157394 252.90599 71.418388 251.82001 70.099998 c
250.617 68.490791 250.02832 66.504837 250.16 64.5 c
250.16 64.110001 l
250.01305 62.052242 250.5896 60.007793 251.78999 58.330002 c
252.94264 57.009277 254.63969 56.293564 256.39001 56.389999 c
257.71884 56.361286 259.01749 56.788284 260.07001 57.599998 c
261.15176 58.51424 261.79501 59.844372 261.84 61.259998 c
268.22 61.259998 l
268.14703 59.823391 267.80795 58.412819 267.22 57.099998 c
266.64761 55.872311 265.81503 54.783817 264.78 53.91 c
263.68341 52.966358 262.4129 52.246189 261.04001 51.790001 c
259.43427 51.27808 257.755 51.034809 256.07001 51.07 c
h
256.07001 51.07 m
f
282.35001 51.07 m
280.58743 51.055195 278.83539 51.342693 277.17001 51.919998 c
274.01532 52.991791 271.48947 55.393349 270.26001 58.490002 c
269.56366 60.248901 269.22375 62.128628 269.26001 64.019997 c
269.26001 64.410004 l
269.22534 66.297997 269.56522 68.174141 270.26001 69.93 c
270.90915 71.510155 271.87186 72.942322 273.09 74.139999 c
274.29355 75.279915 275.71545 76.164352 277.26999 76.739998 c
278.90466 77.347359 280.6362 77.652328 282.38 77.639999 c
283.8154 77.642975 285.24585 77.471718 286.64001 77.129997 c
287.97745 76.808159 289.24265 76.238304 290.37 75.449997 c
291.47299 74.637451 292.3844 73.592926 293.04001 72.389999 c
293.80289 70.957542 294.25281 69.379387 294.35999 67.760002 c
287.69 67.760002 l
287.56732 69.013367 286.987 70.177559 286.06 71.029999 c
285.04578 71.790718 283.7959 72.169586 282.53 72.099998 c
280.82288 72.157394 279.186 71.418388 278.10001 70.099998 c
276.90454 68.487457 276.31985 66.50312 276.45001 64.5 c
276.45001 64.110001 l
276.45001 61.549999 276.98999 59.630001 278.07999 58.330002 c
279.23172 57.008026 280.92944 56.292038 282.67999 56.389999 c
284.0058 56.361153 285.30133 56.788288 286.35001 57.599998 c
287.42847 58.51786 288.07385 59.844944 288.13 61.259998 c
294.5 61.259998 l
294.42703 59.823391 294.08795 58.412819 293.5 57.099998 c
292.93106 55.87294 292.10187 54.784412 291.07001 53.91 c
289.96838 52.96817 288.69498 52.248283 287.32001 51.790001 c
285.71426 51.27808 284.035 51.034809 282.35001 51.07 c
h
282.35001 51.07 m
f
308.82999 51.07 m
307.02539 51.050312 305.23141 51.348183 303.53 51.950001 c
300.37634 53.079697 297.83844 55.476196 296.53 58.560001 c
295.8392 60.296055 295.49933 62.151806 295.53 64.019997 c
295.53 64.410004 l
295.50687 66.274315 295.8465 68.125343 296.53 69.860001 c
297.16638 71.430832 298.11951 72.853737 299.32999 74.040001 c
300.52142 75.190559 301.92834 76.094513 303.47 76.699997 c
305.11084 77.340576 306.85861 77.662979 308.62 77.650002 c
310.2236 77.65789 311.81781 77.404579 313.34 76.900002 c
314.80124 76.415771 316.1438 75.628624 317.28 74.589996 c
318.47357 73.474068 319.40579 72.10817 320.01001 70.589996 c
320.72452 68.721176 321.0643 66.730019 321.01001 64.730003 c
321.01001 62.73 l
302.66 62.73 l
302.63321 60.921726 303.26599 59.165604 304.44 57.790001 c
306.75293 55.797863 310.07645 55.496456 312.70999 57.040001 c
313.5332 57.678978 314.09497 58.596329 314.29001 59.619999 c
320.95999 59.619999 l
320.65875 57.062435 319.28912 54.75185 317.19 53.259998 c
314.69431 51.688892 311.77542 50.924259 308.82999 51.07 c
h
314.19 67.07 m
314.20233 68.655899 313.62906 70.19059 312.57999 71.379997 c
310.28781 73.272514 306.96329 73.230217 304.72 71.279999 c
303.62457 70.132637 302.94812 68.649376 302.79999 67.07 c
h
314.19 67.07 m
f
323.82001 77.059998 m
330.88 77.059998 l
330.88 73.059998 l
331.58304 74.386551 332.61633 75.509369 333.88 76.32 c
335.45816 77.28849 337.29019 77.762169 339.14001 77.68 c
340.31555 77.69603 341.48431 77.499542 342.59 77.099998 c
343.61572 76.720711 344.54709 76.12368 345.32001 75.349998 c
346.11292 74.453651 346.70908 73.401009 347.07001 72.260002 c
347.51624 70.833549 347.72897 69.344345 347.70001 67.849998 c
347.70001 51.639999 l
340.62 51.639999 l
340.62 66.790001 l
340.75244 68.154343 340.39825 69.521584 339.62 70.650002 c
338.72806 71.549332 337.48148 72.003967 336.22 71.889999 c
334.7301 71.993828 333.27179 71.426201 332.24417 70.342438 c
331.21652 69.258675 330.72717 67.772278 330.91 66.290001 c
330.91 51.59 l
323.85001 51.59 l
h
323.82001 77.059998 m
f
361.20001 51.119999 m
358.53333 51.119999 356.48999 51.786667 355.07001 53.119999 c
353.67001 54.459999 352.98001 56.470001 352.98001 59.119999 c
352.98001 72.050003 l
349.72 72.050003 l
349.72 77.050003 l
352.98001 77.050003 l
352.98001 82.550003 l
359.98001 82.550003 l
359.98001 77.050003 l
365.32999 77.050003 l
365.32999 72.050003 l
359.98001 72.050003 l
359.98001 59.779999 l
359.91605 58.964905 360.16653 58.156246 360.67999 57.52 c
361.24783 56.978954 362.01776 56.702934 362.79999 56.759998 c
363.28314 56.754906 363.76556 56.798458 364.23999 56.889999 c
364.66452 56.967419 365.08002 57.088047 365.48001 57.25 c
365.48001 51.799999 l
364.88666 51.609688 364.2822 51.456066 363.67001 51.34 c
362.85632 51.182617 362.02869 51.108902 361.20001 51.119999 c
h
361.20001 51.119999 m
f
376.88 51.07 m
375.7099 51.060677 374.54672 51.250034 373.44 51.630001 c
372.40442 51.99152 371.4642 52.582996 370.69 53.360001 c
369.87091 54.214607 369.24957 55.238754 368.87 56.360001 c
368.40277 57.74778 368.17947 59.206001 368.20999 60.669998 c
368.20999 77.07 l
375.20999 77.07 l
375.20999 61.650002 l
375.10846 60.283054 375.50644 58.925709 376.32999 57.830002 c
377.18341 56.924416 378.39886 56.450714 379.64001 56.540001 c
381.1282 56.439308 382.58368 57.008316 383.60898 58.091671 c
384.63431 59.175022 385.12241 60.659576 384.94 62.139999 c
384.94 77.059998 l
391.94 77.059998 l
391.94 51.599998 l
384.94 51.599998 l
384.94 55.599998 l
384.27151 54.27367 383.25534 53.153809 382 52.360001 c
380.4556 51.440067 378.67593 50.99168 376.88 51.07 c
h
376.88 51.07 m
f
396.34 77.059998 m
403.39999 77.059998 l
403.39999 72.190002 l
404.08292 73.750832 405.17471 75.098267 406.56 76.089996 c
408.08206 77.026077 409.84378 77.49865 411.63 77.449997 c
411.63 70.879997 l
409.50427 71.034752 407.38141 70.543251 405.54001 69.470001 c
404.11334 68.489998 403.39999 66.786667 403.39999 64.360001 c
403.39999 51.599998 l
396.34 51.599998 l
h
396.34 77.059998 m
f
425.62 51.07 m
423.8154 51.050312 422.02139 51.348183 420.32001 51.950001 c
417.16632 53.079697 414.62842 55.476196 413.32001 58.560001 c
412.62921 60.296055 412.28931 62.151806 412.32001 64.019997 c
412.32001 64.410004 l
412.29688 66.274315 412.63651 68.125343 413.32001 69.860001 c
413.95639 71.430832 414.90952 72.853737 416.12 74.040001 c
417.31143 75.190559 418.71835 76.094513 420.26001 76.699997 c
421.90463 77.338409 423.65588 77.65744 425.42001 77.639999 c
427.02362 77.647888 428.61783 77.394577 430.14001 76.889999 c
431.60236 76.408272 432.94543 75.620827 434.07999 74.580002 c
435.27356 73.464066 436.20578 72.098167 436.81 70.580002 c
437.52451 68.711174 437.86429 66.720016 437.81 64.720001 c
437.81 62.720001 l
419.45999 62.720001 l
419.43323 60.911724 420.06598 59.155602 421.23999 57.779999 c
423.55292 55.787865 426.87643 55.486458 429.51001 57.029999 c
430.336 57.666454 430.8985 58.584972 431.09 59.610001 c
437.76001 59.610001 l
437.45874 57.052433 436.08911 54.741848 433.98999 53.25 c
431.49088 51.679199 428.56787 50.917892 425.62 51.07 c
h
430.98001 67.07 m
430.99234 68.655899 430.41907 70.19059 429.37 71.379997 c
427.07782 73.272514 423.7533 73.230217 421.51001 71.279999 c
420.41458 70.132637 419.73813 68.649376 419.59 67.07 c
h
430.98001 67.07 m
f
ep
end
%%Trailer
%%EOF
