%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 541.000000 179.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 541 179
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 541 179
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0.0039215689 0.0039215689 0.0039215689 sc
q
0 0 541 179 rc
200.94 73.110001 m
222.25999 73.110001 l
249.09 145.82001 l
230.17 145.82001 l
212.66 92.870003 l
212.38 92.870003 l
194.31 145.82001 l
173.98 145.82001 l
200.94 73.110001 l
h
200.94 73.110001 m
f
269.31 125.77 m
275.75644 130.7355 283.62457 133.50424 291.76001 133.67 c
302.92001 133.67 308.14001 129.67 308.14001 118 c
297.69 118 l
289.79001 118 280.47 117.3 273.26999 113.77 c
266.07001 110.24 260.84 103.88 260.84 93.010002 c
260.84 79.169998 273.41 71.410004 286.25 71.410004 c
294.87 71.410004 304.32999 75.93 308.70001 83.970001 c
308.98999 83.970001 l
309.04898 80.33297 309.32953 76.702911 309.82999 73.099998 c
326.5 73.099998 l
326.07001 78.75 325.79001 83.830002 325.64999 89.339996 c
325.51001 94.849998 325.37 100.21 325.37 107.55 c
325.37 116.87 l
325.37 138.33 316.19 147.50999 294.01999 147.50999 c
285.31262 147.38463 276.71918 145.51088 268.75 142 c
269.31 125.77 l
h
278.91 94.139999 m
278.91 105.29 291.48001 106.71 299.91 106.71 c
308.10001 106.71 l
308.10001 101.06 307.25 95.839996 304.10001 91.709999 c
300.99304 87.518913 296.04587 85.095657 290.82999 85.209999 c
284.04999 85.209999 278.82999 87.900002 278.82999 94.110001 c
h
278.91 94.139999 m
f
366.91 109.65 m
366.91 119.39 370.29999 132.81 382.57999 132.81 c
394.85999 132.81 399.51999 119.81 399.51999 109.65 c
399.51999 99.489998 395.42999 86.07 382.85999 86.07 c
370.29001 86.07 366.85999 99.629997 366.85999 109.65 c
h
400.23001 73.080002 m
418.62 73.080002 l
418.62 179 l
399.62 179 l
399.62 137.35001 l
399.34 137.35001 l
393.69 144.25999 387.06 147.50999 377.60001 147.50999 c
355.29001 147.50999 347.10001 129.72 347.10001 109.67 c
347.10001 89.620003 355.29001 71.410004 377.60001 71.410004 c
386.48999 71.410004 394.26001 74.230003 399.91 81.290001 c
400.19 81.290001 l
400.19 73.099998 l
h
400.23001 73.080002 m
f
537.38 144.83 m
531.45001 146.10001 525.65997 147.50999 516.76001 147.50999 c
501.94 147.50999 488.23999 140.59 488.23999 124.92 c
488.23999 98.660004 521.14001 108.4 521.14001 94.139999 c
521.14001 87.080002 513.52002 85.239998 508.72 85.239998 c
502.21548 85.359787 495.83029 87.007469 490.07999 90.050003 c
488.95001 74.519997 l
495.94022 72.566643 503.15283 71.521385 510.41 71.410004 c
525.79999 71.410004 540.90997 78.190002 540.90997 95.129997 c
540.90997 121.39 508.01001 114.05 508.01001 125.63 c
508.01001 131.84 514.08002 133.63 519.15997 133.63 c
526.08002 133.63 530.32001 132.50999 536.15997 130.53 c
537.42999 144.78999 l
h
537.38 144.83 m
f
446.29001 73.110001 m
465.20999 73.110001 l
465.20999 145.82001 l
446.29001 145.82001 l
446.29001 73.110001 l
h
446.29001 73.110001 m
f
446.28 159.09 m
465.14999 159.09 l
465.14999 177.96001 l
446.28 177.96001 l
446.28 159.09 l
h
446.28 159.09 m
f
135.41 159.09 m
154.28 159.09 l
154.28 177.96001 l
135.41 177.96001 l
135.41 159.09 l
h
135.41 159.09 m
f
135.41 73.110001 m
154.34 73.110001 l
154.34 145.82001 l
135.41 145.82001 l
135.41 73.110001 l
h
135.41 73.110001 m
f
75.07 73.099998 m
93.559998 73.099998 l
93.559998 99.790001 l
92.949997 135.00999 111.69 127.39 111.69 127.39 c
111.69 147.39 l
111.69 147.60001 97.449997 145.87 93.769997 134.5 c
93.769997 145.82001 l
75.080002 145.82001 l
75.080002 73.099998 l
h
75.07 73.099998 m
f
74.919998 159.09 m
93.790001 159.09 l
93.790001 177.96001 l
74.919998 177.96001 l
74.919998 159.09 l
h
74.919998 159.09 m
f
14.37 94.989998 m
14.37 80.589996 22.559999 71.410004 37.369999 71.410004 c
42.093224 71.306007 46.807198 71.875053 51.369999 73.099998 c
50.799999 88.099998 l
48.799999 86.830002 45.580002 86.099998 42.189999 86.099998 c
34.990002 86.099998 33.299999 91.889999 33.299999 98.099998 c
33.299999 131.98 l
50.099998 131.98 l
50.099998 145.82001 l
0.40000001 145.82001 l
0.40000001 131.98 l
14.4 131.98 l
14.4 94.980003 l
h
14.37 94.989998 m
f
14.27 159.09 m
33.139999 159.09 l
33.139999 177.96001 l
14.27 177.96001 l
14.27 159.09 l
h
14.27 159.09 m
f
2.4000001 35.41 m
12.28 35.41 l
13.861132 35.418831 15.437013 35.227303 16.969999 34.84 c
18.368519 34.508076 19.685102 33.89571 20.84 33.040001 c
21.951456 32.202446 22.852022 31.11697 23.469999 29.870001 c
24.164858 28.416819 24.507452 26.82033 24.469999 25.209999 c
24.469999 25.01 l
24.509121 23.377012 24.166712 21.75742 23.469999 20.280001 c
22.85813 19.023521 21.956758 17.930223 20.84 17.09 c
19.685787 16.230978 18.3692 15.61521 16.969999 15.28 c
15.435692 14.900917 13.860429 14.712826 12.28 14.72 c
6.6199999 14.72 l
6.6199999 0.60000002 l
2.3900001 0.60000002 l
h
12.62 18.129999 m
14.671749 17.983603 16.703341 18.615574 18.309999 19.9 c
19.693771 21.240065 20.424131 23.117094 20.309999 25.040001 c
20.309999 25.23 l
20.309999 27.700001 19.629999 29.440001 18.309999 30.469999 c
16.658283 31.572998 14.693102 32.109913 12.71 32 c
6.6199999 32 l
6.6199999 18.129999 l
h
12.62 18.129999 m
f
35.880001 0.17 m
34.762215 0.16164282 33.648548 0.30631882 32.57 0.60000002 c
31.586123 0.86810458 30.667355 1.3342943 29.870001 1.97 c
29.097864 2.5969939 28.481712 3.394568 28.07 4.3000002 c
27.60606 5.3579845 27.380726 6.5051341 27.41 7.6599998 c
27.367586 8.9753065 27.7421 10.270352 28.48 11.36 c
29.223156 12.387748 30.200018 13.224078 31.33 13.8 c
32.618137 14.447844 33.997196 14.89629 35.419998 15.13 c
36.984173 15.412131 38.570591 15.5527 40.16 15.55 c
43.82 15.55 l
43.82 17.379999 l
43.82 19.379999 43.389999 20.870001 42.549999 21.76 c
41.709999 22.65 40.310001 23.09 38.360001 23.09 c
34.860001 23.09 32.913334 21.58 32.52 18.559999 c
28.52 18.559999 l
28.600874 19.860874 28.97706 21.126226 29.620001 22.26 c
30.190729 23.240217 30.973091 24.080658 31.91 24.719999 c
32.85482 25.361824 33.908707 25.826075 35.02 26.09 c
36.193581 26.363962 37.394867 26.501541 38.599998 26.5 c
39.778725 26.501326 40.953495 26.36371 42.099998 26.09 c
43.200432 25.839178 44.22747 25.335928 45.099998 24.620001 c
45.975311 23.858868 46.660255 22.903368 47.099998 21.83 c
47.658955 20.422102 47.921097 18.913933 47.869999 17.4 c
47.869999 0.60000002 l
43.869999 0.60000002 l
43.869999 3.8199999 l
42.995747 2.678946 41.878819 1.7464634 40.599998 1.09 c
39.119022 0.42233121 37.503319 0.10740619 35.880001 0.17 c
h
36.27 3.3800001 m
37.284477 3.3722634 38.2948 3.5103412 39.27 3.79 c
40.134186 4.0383329 40.944641 4.4452543 41.66 4.9899998 c
43.056358 6.0695877 43.860821 7.7452402 43.830002 9.5100002 c
43.830002 12.65 l
40.32 12.65 l
39.137947 12.656207 37.957359 12.565907 36.790001 12.38 c
35.813419 12.236408 34.863262 11.950012 33.970001 11.53 c
33.228855 11.187942 32.590809 10.656813 32.119999 9.9899998 c
31.658512 9.2917566 31.427677 8.4663429 31.459999 7.6300001 c
31.396528 6.4842553 31.780119 5.358583 32.529999 4.4899998 c
33.256668 3.75 34.503334 3.3800001 36.27 3.3800001 c
h
36.27 3.3800001 m
f
55.16 26.059999 m
59.16 26.059999 l
59.16 21.49 l
59.533733 22.200418 59.979401 22.870598 60.490002 23.49 c
61.531254 24.73951 62.925369 25.645685 64.489998 26.09 c
65.466751 26.365839 66.475174 26.513741 67.489998 26.530001 c
67.489998 22.65 l
66.324112 22.599428 65.165627 22.438711 64.029999 22.17 c
63.056019 21.942114 62.148636 21.490135 61.380001 20.85 c
60.617786 20.188101 60.039154 19.340818 59.700001 18.389999 c
59.27692 17.145033 59.080479 15.834297 59.119999 14.52 c
59.119999 0.51999998 l
55.119999 0.51999998 l
h
55.16 26.059999 m
f
80.809998 0.25999999 m
78.470001 0.25999999 76.739998 0.87666667 75.620003 2.1099999 c
74.461296 3.4607561 73.86058 5.2021294 73.940002 6.98 c
73.940002 22.65 l
70.290001 22.65 l
70.290001 26.059999 l
73.940002 26.059999 l
73.940002 31.85 l
77.940002 31.85 l
77.940002 26.059999 l
83.879997 26.059999 l
83.879997 22.65 l
77.940002 22.65 l
77.940002 7.3699999 l
77.940002 4.8966665 78.996666 3.6633334 81.110001 3.6700001 c
81.680237 3.663512 82.24971 3.7137592 82.809998 3.8199999 c
83.290756 3.9074161 83.762657 4.0379429 84.220001 4.21 c
84.220001 0.80000001 l
83.762161 0.62948257 83.29039 0.49899366 82.809998 0.41 c
82.149162 0.30028951 81.479813 0.25008827 80.809998 0.25999999 c
h
80.809998 0.25999999 m
f
111.95 0.17 m
110.23281 0.16132833 108.53176 0.50153929 106.95 1.17 c
105.46661 1.7925044 104.12592 2.7112594 103.01 3.8699999 c
101.88041 5.0510387 101.00264 6.4493413 100.43 7.98 c
99.79966 9.6266003 99.484192 11.376943 99.5 13.14 c
99.5 13.53 l
99.495552 15.330996 99.834961 17.116283 100.5 18.790001 c
101.09452 20.316656 101.98107 21.712713 103.11 22.9 c
104.21969 24.061134 105.5624 24.974453 107.05 25.58 c
110.26295 26.846956 113.83705 26.846956 117.05 25.58 c
118.55304 24.984304 119.91536 24.081766 121.05 22.93 c
122.17746 21.751114 123.06102 20.361195 123.65 18.84 c
124.31504 17.166283 124.65445 15.380996 124.65 13.58 c
124.65 13.19 l
124.65165 11.382776 124.31239 9.5914602 123.65 7.9099998 c
123.06406 6.3743415 122.16889 4.9754262 121.02 3.8 c
119.88168 2.6527057 118.52036 1.7508247 117.02 1.15 c
115.41364 0.48389935 113.68888 0.15051271 111.95 0.17 c
h
112 3.5699999 m
113.1879 3.5555389 114.36593 3.7870603 115.46 4.25 c
116.4745 4.6852722 117.37461 5.3492327 118.09 6.1900001 c
118.8269 7.0752072 119.38703 8.0936327 119.74 9.1899996 c
120.14481 10.446448 120.34404 11.760026 120.33 13.08 c
120.33 13.42 l
120.34855 14.776308 120.14935 16.126806 119.74 17.42 c
119.39249 18.543028 118.82098 19.583979 118.06 20.48 c
117.34014 21.313484 116.44102 21.973289 115.43 22.41 c
114.34702 22.874765 113.17838 23.106451 112 23.09 c
110.81533 23.104527 109.64055 22.872974 108.55 22.41 c
107.53468 21.980804 106.63398 21.319828 105.92 20.48 c
105.17661 19.597626 104.61272 18.578547 104.26 17.48 c
103.85113 16.186918 103.65524 14.835958 103.68 13.48 c
103.68 13.09 l
103.53858 10.563634 104.32844 8.0731058 105.9 6.0900002 c
107.44433 4.3660898 109.68925 3.4386783 112 3.5699999 c
h
112 3.5699999 m
f
131.03 22.65 m
127.38 22.65 l
127.38 26.059999 l
131.03 26.059999 l
131.03 30.200001 l
130.90298 32.365719 131.57953 34.502151 132.92999 36.200001 c
134.42238 37.717567 136.50763 38.500446 138.63 38.34 c
139.16588 38.348972 139.70145 38.308807 140.23 38.220001 c
140.70766 38.127979 141.1787 38.004375 141.64 37.849998 c
141.64 34.400002 l
141.22655 34.579514 140.79366 34.710392 140.35001 34.790001 c
139.82954 34.891792 139.30032 34.942036 138.77 34.939999 c
137.67938 35.044426 136.61018 34.58889 135.92999 33.73 c
135.32269 32.794998 135.02208 31.693888 135.07001 30.58 c
135.07001 26.030001 l
141.3 26.030001 l
141.3 22.65 l
135.07001 22.65 l
135.07001 0.60000002 l
131.07001 0.60000002 l
h
131.03 22.65 m
f
166.42 35.41 m
176.69 35.41 l
187.98 0.60000002 l
179.75 0.60000002 l
177.37 8.3400002 l
164.75999 8.3400002 l
162.38 0.60000002 l
154.98 0.60000002 l
h
166.42 13.94 m
175.62 13.94 l
171.05 28.940001 l
h
166.42 13.94 m
f
201.07001 0.07 m
199.30733 0.053605825 197.55501 0.3411482 195.89 0.92000002 c
192.73531 1.9917897 190.20946 4.3933487 188.98 7.4899998 c
188.28366 9.2489004 187.94376 11.128626 187.98 13.02 c
187.98 13.41 l
187.94534 15.297998 188.28523 17.174145 188.98 18.93 c
189.62196 20.511541 190.58177 21.944454 191.8 23.139999 c
193.00717 24.280178 194.43239 25.164557 195.99001 25.74 c
197.62444 26.348227 199.35611 26.653219 201.10001 26.639999 c
202.5354 26.642971 203.96587 26.47172 205.36 26.129999 c
206.69511 25.810387 207.95746 25.240301 209.08 24.450001 c
210.18596 23.637829 211.10071 22.593378 211.75999 21.389999 c
212.51939 19.956762 212.96591 18.378649 213.07001 16.76 c
206.41 16.76 l
206.28368 18.012321 205.70398 19.175283 204.78 20.030001 c
203.76501 20.789173 202.51569 21.167864 201.25 21.1 c
199.54289 21.157391 197.90599 20.418388 196.82001 19.1 c
195.617 17.490795 195.02832 15.504841 195.16 13.5 c
195.16 13.11 l
195.01305 11.05224 195.5896 9.0077944 196.78999 7.3299999 c
197.94264 6.0092788 199.63969 5.2935638 201.39 5.3899999 c
202.71884 5.3612857 204.01749 5.7882848 205.07001 6.5999999 c
206.15175 7.5142422 206.79501 8.8443727 206.84 10.26 c
213.22 10.26 l
213.14703 8.82339 212.80795 7.4128175 212.22 6.0999999 c
211.64761 4.8723125 210.81503 3.7838182 209.78 2.9100001 c
208.6834 1.9663596 207.4129 1.2461882 206.03999 0.79000002 c
204.43425 0.27807963 202.755 0.034807682 201.07001 0.07 c
h
201.07001 0.07 m
f
227.35001 0.07 m
225.58745 0.055194944 223.83539 0.34269312 222.17 0.92000002 c
219.0153 1.9917897 216.48947 4.3933487 215.25999 7.4899998 c
214.56367 9.2489004 214.22375 11.128626 214.25999 13.02 c
214.25999 13.41 l
214.22534 15.297998 214.56523 17.174145 215.25999 18.93 c
215.90915 20.510153 216.87187 21.942322 218.09 23.139999 c
219.29356 24.279917 220.71545 25.164351 222.27 25.74 c
223.90468 26.347363 225.63618 26.652327 227.38 26.639999 c
228.8154 26.642971 230.24586 26.47172 231.64 26.129999 c
232.97745 25.808157 234.24265 25.238304 235.37 24.450001 c
236.47299 23.637453 237.3844 22.592924 238.03999 21.389999 c
238.80289 19.957544 239.25281 18.379391 239.36 16.76 c
232.69 16.76 l
232.56732 18.013371 231.987 19.177559 231.06 20.030001 c
230.04579 20.790718 228.79588 21.169584 227.53 21.1 c
225.82289 21.157391 224.18599 20.418388 223.10001 19.1 c
221.90453 17.487459 221.31985 15.50312 221.45 13.5 c
221.45 13.11 l
221.45 10.55 221.99001 8.6300001 223.08 7.3299999 c
224.23174 6.0080256 225.92943 5.2920399 227.67999 5.3899999 c
229.0058 5.3611517 230.30133 5.7882876 231.35001 6.5999999 c
232.42845 7.5178604 233.07387 8.844945 233.13 10.26 c
239.5 10.26 l
239.42703 8.82339 239.08795 7.4128175 238.5 6.0999999 c
237.93106 4.8729401 237.10187 3.7844131 236.07001 2.9100001 c
234.96837 1.9681687 233.69499 1.2482835 232.32001 0.79000002 c
230.71425 0.27807963 229.035 0.034807682 227.35001 0.07 c
h
227.35001 0.07 m
f
253.83 0.07 m
252.02541 0.050312657 250.2314 0.34818384 248.53 0.94999999 c
245.37633 2.0796947 242.83842 4.4761958 241.53 7.5599999 c
240.8392 9.2960548 240.49931 11.151806 240.53 13.02 c
240.53 13.41 l
240.50687 15.274317 240.84651 17.12534 241.53 18.860001 c
242.16638 20.430832 243.11952 21.853735 244.33 23.040001 c
245.52144 24.190559 246.92834 25.094517 248.47 25.700001 c
250.11084 26.340578 251.85861 26.662983 253.62 26.65 c
255.22362 26.657892 256.81781 26.404577 258.34 25.9 c
259.80124 25.415775 261.1438 24.628624 262.28 23.59 c
263.47357 22.474066 264.40579 21.10817 265.01001 19.59 c
265.72452 17.721178 266.0643 15.73002 266.01001 13.73 c
266.01001 11.73 l
247.66 11.73 l
247.63322 9.9217243 248.26599 8.1656027 249.44 6.79 c
251.75291 4.797864 255.07643 4.4964561 257.70999 6.04 c
258.5332 6.6789761 259.09497 7.5963306 259.29001 8.6199999 c
265.95999 8.6199999 l
265.65875 6.0624342 264.28912 3.7518492 262.19 2.26 c
259.69431 0.68889391 256.77542 -0.075741991 253.83 0.07 c
h
259.19 16.07 m
259.20233 17.655901 258.62906 19.190586 257.57999 20.379999 c
255.28781 22.272516 251.9633 22.230219 249.72 20.280001 c
248.62459 19.132639 247.94814 17.649376 247.8 16.07 c
h
259.19 16.07 m
f
268.82001 26.059999 m
275.88 26.059999 l
275.88 22.059999 l
276.58304 23.386551 277.61633 24.509373 278.88 25.32 c
280.45816 26.288488 282.29019 26.762169 284.14001 26.68 c
285.31555 26.696032 286.48431 26.499542 287.59 26.1 c
288.61572 25.720711 289.54709 25.12368 290.32001 24.35 c
291.11292 23.453653 291.70908 22.401005 292.07001 21.26 c
292.51624 19.833546 292.72897 18.344343 292.70001 16.85 c
292.70001 0.63999999 l
285.62 0.63999999 l
285.62 15.79 l
285.75244 17.154346 285.39825 18.521585 284.62 19.65 c
283.72806 20.549332 282.48148 21.003967 281.22 20.889999 c
279.7301 20.993832 278.27179 20.426197 277.24417 19.342438 c
276.21652 18.258678 275.72717 16.772276 275.91 15.29 c
275.91 0.58999997 l
268.85001 0.58999997 l
h
268.82001 26.059999 m
f
306.20001 0.12 m
303.53333 0.12 301.48999 0.78666669 300.07001 2.1199999 c
298.67001 3.46 297.98001 5.4699998 297.98001 8.1199999 c
297.98001 21.049999 l
294.72 21.049999 l
294.72 26.049999 l
297.98001 26.049999 l
297.98001 31.549999 l
304.98001 31.549999 l
304.98001 26.049999 l
310.32999 26.049999 l
310.32999 21.049999 l
304.98001 21.049999 l
304.98001 8.7799997 l
304.91605 7.9649043 305.16653 7.1562457 305.67999 6.52 c
306.24783 5.9789538 307.01776 5.7029357 307.79999 5.7600002 c
308.28314 5.7549062 308.76556 5.7984591 309.23999 5.8899999 c
309.66452 5.9674201 310.08002 6.0880475 310.48001 6.25 c
310.48001 0.80000001 l
309.88666 0.60968822 309.2822 0.45606461 308.67001 0.34 c
307.85632 0.18261878 307.02869 0.1089016 306.20001 0.12 c
h
306.20001 0.12 m
f
321.88 0.07 m
320.7099 0.060677551 319.54672 0.25003356 318.44 0.63 c
317.40442 0.99152094 316.4642 1.5829964 315.69 2.3599999 c
314.87091 3.2146077 314.24957 4.2387543 313.87 5.3600001 c
313.40277 6.7477803 313.17947 8.2060013 313.20999 9.6700001 c
313.20999 26.07 l
320.20999 26.07 l
320.20999 10.65 l
320.10846 9.2830563 320.50644 7.9257083 321.32999 6.8299999 c
322.18341 5.9244161 323.39886 5.4507146 324.64001 5.54 c
326.1282 5.4393091 327.58368 6.0083179 328.60898 7.0916705 c
329.63431 8.1750231 330.12241 9.6595755 329.94 11.14 c
329.94 26.059999 l
336.94 26.059999 l
336.94 0.60000002 l
329.94 0.60000002 l
329.94 4.5999999 l
329.27151 3.2736695 328.25534 2.1538074 327 1.36 c
325.4556 0.44006765 323.67593 -0.0083215712 321.88 0.07 c
h
321.88 0.07 m
f
341.34 26.059999 m
348.39999 26.059999 l
348.39999 21.190001 l
349.08292 22.750834 350.17471 24.098269 351.56 25.09 c
353.08206 26.026075 354.84378 26.498648 356.63 26.450001 c
356.63 19.879999 l
354.50427 20.034748 352.38141 19.543251 350.54001 18.469999 c
349.11334 17.49 348.39999 15.786667 348.39999 13.36 c
348.39999 0.60000002 l
341.34 0.60000002 l
h
341.34 26.059999 m
f
370.62 0.07 m
368.8154 0.050312657 367.02139 0.34818384 365.32001 0.94999999 c
362.16632 2.0796947 359.62842 4.4761958 358.32001 7.5599999 c
357.62921 9.2960548 357.28931 11.151806 357.32001 13.02 c
357.32001 13.41 l
357.29688 15.274317 357.63651 17.12534 358.32001 18.860001 c
358.95639 20.430832 359.90952 21.853735 361.12 23.040001 c
362.31143 24.190559 363.71835 25.094517 365.26001 25.700001 c
366.90463 26.338413 368.65588 26.65744 370.42001 26.639999 c
372.02362 26.647892 373.61783 26.394577 375.14001 25.889999 c
376.60236 25.408272 377.94543 24.620829 379.07999 23.58 c
380.27356 22.464066 381.20578 21.098169 381.81 19.58 c
382.52451 17.711178 382.86429 15.720019 382.81 13.72 c
382.81 11.72 l
364.45999 11.72 l
364.43323 9.911725 365.06598 8.1556025 366.23999 6.7800002 c
368.55292 4.7878637 371.87643 4.4864564 374.51001 6.0300002 c
375.336 6.6664524 375.8985 7.5849705 376.09 8.6099997 c
382.76001 8.6099997 l
382.45874 6.0524344 381.08911 3.7418492 378.98999 2.25 c
376.49088 0.67919809 373.56787 -0.082107268 370.62 0.07 c
h
375.98001 16.07 m
375.99234 17.655901 375.41907 19.190586 374.37 20.379999 c
372.07782 22.272516 368.7533 22.230219 366.51001 20.280001 c
365.41458 19.132639 364.73813 17.649376 364.59 16.07 c
h
375.98001 16.07 m
f
ep
end
%%Trailer
%%EOF
