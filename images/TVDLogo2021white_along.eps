%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 630.000000 71.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 630 71
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 630 71
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 630 71 rc
130.50999 1.61 m
144.28999 1.61 l
161.64 48.639999 l
149.41 48.639999 l
138.09 14.4 l
137.89999 14.4 l
126.21 48.639999 l
113.06 48.639999 l
130.50999 1.61 l
h
130.50999 1.61 m
f
174.72 35.650002 m
178.88716 38.86694 183.97672 40.661606 189.24001 40.77 c
196.46001 40.77 199.83 38.209999 199.83 30.629999 c
193.08 30.629999 l
187.96001 30.629999 181.94 30.17 177.28 27.889999 c
172.62 25.610001 169.28 21.5 169.28 14.47 c
169.28 5.4699998 177.41 0.47 185.72 0.47 c
191.28999 0.47 197.41 3.4000001 200.24001 8.6000004 c
200.42 8.6000004 l
200.45802 6.2575202 200.64171 3.9196737 200.97 1.6 c
211.75 1.6 l
211.47 5.25 211.28999 8.54 211.2 12.1 c
211.11 15.66 211.02 19.1 211.02 23.879999 c
211.02 29.879999 l
211.02 43.759998 205.08 49.689999 190.74001 49.689999 c
185.11002 49.608482 179.55363 48.397915 174.39999 46.130001 c
174.75999 35.630001 l
h
180.92999 15.2 m
180.92999 22.41 189.06 23.32 194.53999 23.32 c
199.83 23.32 l
199.83 19.67 199.28999 16.32 197.28 13.64 c
195.26704 10.930011 192.06496 9.3643827 188.69 9.4399996 c
184.31 9.4399996 180.92999 11.18 180.92999 15.2 c
h
180.92999 15.2 m
f
237.84 25.26 m
237.84 31.559999 240.03999 40.259998 247.98 40.259998 c
255.92 40.259998 258.98001 31.860001 258.98001 25.26 c
258.98001 18.66 256.32999 10.01 248.2 10.01 c
240.07001 10.01 237.88 18.780001 237.88 25.26 c
h
259.39001 1.65 m
271.26001 1.65 l
271.26001 70.099998 l
259.03 70.099998 l
259.03 43.16 l
258.85001 43.16 l
255.19 47.630001 250.89999 49.73 244.78 49.73 c
230.36 49.73 225.06 38.23 225.06 25.26 c
225.06 12.29 230.36 0.50999999 244.78 0.50999999 c
250.53 0.50999999 255.56 2.3399999 259.20999 6.9099998 c
259.39001 6.9099998 l
259.39001 1.65 l
h
259.39001 1.65 m
f
348.10001 48 m
343.73804 49.105556 339.25967 49.686333 334.76001 49.73 c
325.17999 49.73 316.32001 45.259998 316.32001 35.119999 c
316.32001 18.120001 337.59 24.440001 337.59 15.22 c
337.59 10.65 332.66 9.46 329.59 9.46 c
325.38202 9.5385885 321.25122 10.603826 317.53 12.57 c
316.79999 2.5699999 l
321.32611 1.3154401 325.9938 0.64334947 330.69 0.56999999 c
340.64001 0.56999999 350.41 4.96 350.41 15.92 c
350.41 32.919998 329.13 28.15 329.13 35.639999 c
329.13 39.639999 333.06 40.849998 336.35001 40.849998 c
340.09253 40.868961 343.80582 40.190731 347.29999 38.849998 c
348.13 48.07 l
h
348.10001 48 m
f
289.19 1.61 m
301.42001 1.61 l
301.42001 48.639999 l
289.19 48.639999 l
289.19 1.61 l
h
289.19 1.61 m
f
289.17999 57.220001 m
301.38 57.220001 l
301.38 69.43 l
289.17999 69.43 l
289.17999 57.220001 l
h
289.17999 57.220001 m
f
88.120003 57.23 m
100.33 57.23 l
100.33 69.43 l
88.120003 69.43 l
88.120003 57.23 l
h
88.120003 57.23 m
f
88.120003 1.61 m
100.36 1.61 l
100.36 48.639999 l
88.120003 48.639999 l
88.120003 1.61 l
h
88.120003 1.61 m
f
49.09 1.65 m
61.09 1.65 l
61.09 18.870001 l
60.689999 41.650002 72.809998 36.720001 72.809998 36.720001 c
72.809998 49.650002 l
72.809998 49.779999 63.599998 48.650002 61.220001 41.310001 c
61.220001 48.650002 l
49.130001 48.650002 l
49.130001 1.65 l
h
49.09 1.65 m
f
49 57.23 m
61.200001 57.23 l
61.200001 69.43 l
49 69.43 l
49 57.23 l
h
49 57.23 m
f
9.8299999 15.76 m
9.8299999 6.4499998 15.13 0.50999999 24.719999 0.50999999 c
27.756845 0.45074531 30.786821 0.82107562 33.720001 1.61 c
33.349998 11.29 l
31.640228 10.375512 29.717466 9.9336567 27.780001 10.01 c
23.129999 10.01 22.030001 13.75 22.030001 17.77 c
22.030001 39.650002 l
32.900002 39.650002 l
32.900002 48.650002 l
0.75 48.650002 l
0.75 39.650002 l
9.75 39.650002 l
9.75 15.72 l
h
9.8299999 15.76 m
f
9.7700005 57.23 m
21.98 57.23 l
21.98 69.43 l
9.7700005 69.43 l
9.7700005 57.23 l
h
9.7700005 57.23 m
f
383.48999 48.650002 m
389.88 48.650002 l
390.89139 48.649971 391.89893 48.525707 392.88 48.279999 c
393.78705 48.063366 394.64087 47.665375 395.39001 47.110001 c
396.10565 46.567966 396.68442 45.865894 397.07999 45.060001 c
397.52255 44.123302 397.73837 43.095585 397.70999 42.060001 c
397.70999 41.93 l
397.73959 40.874992 397.52396 39.827511 397.07999 38.869999 c
396.68732 38.05946 396.10818 37.353504 395.39001 36.810001 c
394.64087 36.254623 393.78705 35.856632 392.88 35.639999 c
391.8985 35.397762 390.89096 35.276859 389.88 35.279999 c
386.23001 35.279999 l
386.23001 26.15 l
383.48999 26.15 l
h
390.07001 37.470001 m
391.40112 37.373184 392.71954 37.784073 393.76001 38.619999 c
394.64435 39.489769 395.10461 40.702488 395.01999 41.939999 c
395.01999 42.07 l
395.15341 43.346008 394.6572 44.607071 393.69 45.450001 c
392.62384 46.167393 391.35321 46.518394 390.07001 46.450001 c
386.23001 46.450001 l
386.23001 37.450001 l
h
390.07001 37.470001 m
f
405.14999 25.889999 m
404.42673 25.887617 403.70657 25.985207 403.01001 26.18 c
402.37329 26.352301 401.77802 26.65164 401.26001 27.059999 c
400.76178 27.466881 400.36472 27.983753 400.10001 28.57 c
399.80118 29.253645 399.65445 29.994059 399.67001 30.74 c
399.64307 31.590857 399.88831 32.428116 400.37 33.130001 c
400.84677 33.797497 401.47809 34.339615 402.20999 34.709999 c
403.03958 35.133015 403.93042 35.42321 404.85001 35.57 c
405.86325 35.751308 406.89066 35.841671 407.92001 35.84 c
410.28 35.84 l
410.28 37.029999 l
410.37671 38.043308 410.08347 39.055367 409.45999 39.860001 c
408.71542 40.503712 407.73972 40.814487 406.76001 40.720001 c
404.48666 40.720001 403.22665 39.743332 402.98001 37.790001 c
400.37 37.790001 l
400.4212 38.632233 400.66037 39.452305 401.07001 40.189999 c
401.44418 40.819569 401.94882 41.361721 402.54999 41.779999 c
403.15961 42.188866 403.8367 42.486778 404.54999 42.66 c
405.30695 42.838005 406.0824 42.925285 406.85999 42.919998 c
407.62439 42.925365 408.38663 42.838062 409.13 42.66 c
409.83328 42.491684 410.48956 42.166965 411.04999 41.709999 c
411.62946 41.221878 412.08231 40.600906 412.37 39.900002 c
412.73813 38.992821 412.91187 38.018509 412.88 37.040001 c
412.88 26.18 l
410.26001 26.18 l
410.26001 28.26 l
409.69852 27.519035 408.97733 26.914062 408.14999 26.49 c
407.20987 26.060612 406.18295 25.855225 405.14999 25.889999 c
h
405.39999 27.969999 m
406.0564 27.964334 406.71008 28.055309 407.34 28.24 c
407.89767 28.396317 408.42035 28.657661 408.88 29.01 c
409.29919 29.34605 409.64038 29.769136 409.88 30.25 c
410.1427 30.773872 410.27316 31.354094 410.26001 31.940001 c
410.26001 33.939999 l
408 33.939999 l
407.23328 33.947235 406.46725 33.890373 405.70999 33.77 c
405.07932 33.678452 404.46585 33.493065 403.89001 33.220001 c
403.40872 32.998478 402.99469 32.65345 402.69 32.220001 c
402.39703 31.764862 402.25046 31.230925 402.26999 30.690001 c
402.23486 29.959496 402.4819 29.243441 402.95999 28.690001 c
403.64114 28.127373 404.52252 27.867298 405.39999 27.969999 c
h
405.39999 27.969999 m
f
417.62 42.650002 m
420.23001 42.650002 l
420.23001 39.650002 l
420.47562 40.105198 420.76715 40.534092 421.10001 40.93 c
421.41782 41.317043 421.79199 41.654137 422.20999 41.93 c
422.66534 42.231567 423.16458 42.460941 423.69 42.610001 c
424.34116 42.79224 425.01382 42.88641 425.69 42.889999 c
425.69 40.439999 l
424.93793 40.407223 424.19095 40.300034 423.45999 40.119999 c
422.82816 39.974903 422.23907 39.683792 421.73999 39.27 c
421.24585 38.844715 420.87323 38.296101 420.66 37.68 c
420.38498 36.876068 420.25626 36.029346 420.28 35.18 c
420.28 26.18 l
417.62 26.18 l
h
417.62 42.650002 m
f
434.20999 25.959999 m
432.97144 25.858511 431.7486 26.291599 430.85001 27.15 c
430.10312 28.024803 429.71701 29.150965 429.76999 30.299999 c
429.76999 40.439999 l
427.41 40.439999 l
427.41 42.650002 l
429.76999 42.650002 l
429.76999 46.400002 l
432.38 46.400002 l
432.38 42.650002 l
436.22 42.650002 l
436.22 40.450001 l
432.38 40.450001 l
432.38 30.559999 l
432.38 28.969999 433.06 28.17 434.42999 28.17 c
434.79919 28.163881 435.16797 28.197405 435.53 28.27 c
435.83987 28.327393 436.14429 28.411028 436.44 28.52 c
436.44 26.309999 l
436.14447 26.200512 435.84 26.116865 435.53 26.059999 c
435.0936 25.989607 434.65204 25.956156 434.20999 25.959999 c
h
434.20999 25.959999 m
f
454.35001 25.889999 m
453.23849 25.878498 452.13623 26.092829 451.10999 26.52 c
450.14944 26.923141 449.28162 27.518707 448.56 28.27 c
447.8345 29.03874 447.26709 29.94252 446.89001 30.93 c
446.48303 31.996056 446.27951 33.128956 446.29001 34.27 c
446.29001 34.52 l
446.27759 35.682533 446.48804 36.836678 446.91 37.919998 c
447.2944 38.906109 447.86475 39.809155 448.59 40.580002 c
449.31165 41.326283 450.17984 41.915279 451.14001 42.310001 c
453.21994 43.123634 455.53006 43.123634 457.60999 42.310001 c
458.57449 41.921558 459.44916 41.339588 460.17999 40.599998 c
460.90738 39.83461 461.47809 38.934387 461.85999 37.950001 c
462.27853 36.866009 462.4856 35.711884 462.47 34.549999 c
462.47 34.299999 l
462.48474 33.131687 462.27774 31.971178 461.85999 30.879999 c
461.47565 29.889219 460.89771 28.984951 460.16 28.219999 c
459.42737 27.48258 458.55319 26.900923 457.59 26.51 c
456.56219 26.089155 455.46057 25.878345 454.35001 25.889999 c
h
454.35001 28.1 m
455.11942 28.086285 455.88293 28.236265 456.59 28.540001 c
457.24551 28.819948 457.82733 29.247772 458.29001 29.790001 c
458.77728 30.378099 459.14117 31.058279 459.35999 31.790001 c
459.62051 32.604298 459.74881 33.45509 459.73999 34.310001 c
459.73999 34.529999 l
459.7482 35.401245 459.61996 36.268406 459.35999 37.099998 c
459.1413 37.83588 458.7699 38.517376 458.26999 39.099998 c
457.80328 39.637852 457.22253 40.06488 456.57001 40.349998 c
455.86887 40.650105 455.11261 40.799992 454.35001 40.790001 c
453.58426 40.798748 452.82501 40.648941 452.12 40.349998 c
451.46451 40.070053 450.88266 39.642227 450.42001 39.099998 c
449.93497 38.510399 449.57132 37.830692 449.35001 37.099998 c
449.0885 36.275623 448.96024 35.414803 448.97 34.549999 c
448.97 34.299999 l
448.88754 32.676525 449.39551 31.078074 450.39999 29.799999 c
451.39465 28.651426 452.86249 28.024454 454.38 28.1 c
h
454.35001 28.1 m
f
466.69 40.439999 m
464.32999 40.439999 l
464.32999 42.650002 l
466.69 42.650002 l
466.69 45.330002 l
466.60062 46.73774 467.03915 48.128258 467.92001 49.23 c
468.88217 50.227951 470.23724 50.748005 471.62 50.650002 c
471.95502 50.651966 472.28958 50.625202 472.62 50.57 c
472.89001 50.509998 473.20001 50.43 473.53 50.330002 c
473.53 48.099998 l
473.26236 48.210823 472.98431 48.294575 472.70001 48.349998 c
472.36996 48.409409 472.03534 48.439526 471.70001 48.439999 c
470.99405 48.509087 470.30124 48.215393 469.85999 47.66 c
469.47174 47.066952 469.27615 46.368439 469.29999 45.66 c
469.29999 42.650002 l
473.29999 42.650002 l
473.29999 40.450001 l
469.29999 40.450001 l
469.29999 26.190001 l
466.69 26.190001 l
h
466.69 40.439999 m
f
489.62 48.650002 m
496.26001 48.650002 l
503.56 26.139999 l
498.23999 26.139999 l
496.70001 31.139999 l
488.54999 31.139999 l
487 26.139999 l
482.22 26.139999 l
h
489.62 34.759998 m
495.57001 34.759998 l
492.57001 44.490002 l
h
489.62 34.759998 m
f
511.98999 25.83 m
510.85037 25.823965 509.71786 26.009897 508.64001 26.379999 c
506.59818 27.071518 504.96359 28.625658 504.17001 30.629999 c
503.72052 31.765633 503.49963 32.978821 503.51999 34.200001 c
503.51999 34.459999 l
503.5015 35.681957 503.72583 36.895428 504.17999 38.029999 c
504.99567 40.079849 506.64731 41.684212 508.72 42.439999 c
509.77649 42.828979 510.89417 43.025421 512.02002 43.02 c
512.94995 43.021805 513.87671 42.910995 514.78003 42.689999 c
515.64264 42.484268 516.45746 42.114185 517.17999 41.599998 c
517.8996 41.068947 518.49365 40.386158 518.91998 39.599998 c
519.4101 38.670479 519.69965 37.648453 519.77002 36.599998 c
515.45001 36.599998 l
515.37347 37.40913 514.99933 38.161045 514.40002 38.709999 c
513.74445 39.200279 512.93738 39.444515 512.12 39.400002 c
511.01797 39.445492 509.95743 38.976189 509.25 38.130001 c
508.47595 37.084274 508.09692 35.798378 508.17999 34.5 c
508.17999 34.25 l
508.08139 32.920464 508.45691 31.598972 509.23999 30.52 c
509.98712 29.652842 511.09775 29.186377 512.23999 29.26 c
513.09943 29.238745 513.93988 29.514198 514.62 30.040001 c
515.31665 30.635359 515.73346 31.494314 515.77002 32.41 c
519.89001 32.41 l
519.84271 31.479574 519.61871 30.566656 519.22998 29.719999 c
518.85486 28.918318 518.30469 28.210964 517.62 27.65 c
516.91199 27.037626 516.08942 26.571953 515.20001 26.280001 c
514.16296 25.950272 513.0777 25.79813 511.98999 25.83 c
h
511.98999 25.83 m
f
528.98999 25.83 m
527.8504 25.823965 526.7179 26.009897 525.64001 26.379999 c
523.59308 27.063074 521.95544 28.620152 521.16998 30.629999 c
520.72052 31.765633 520.49963 32.978821 520.52002 34.200001 c
520.52002 34.459999 l
520.50146 35.681957 520.72583 36.895428 521.17999 38.029999 c
521.99561 40.076347 523.64252 41.679619 525.71002 42.439999 c
526.77002 42.828903 527.89093 43.025322 529.02002 43.02 c
529.94666 43.021782 530.87006 42.910969 531.77002 42.689999 c
532.63635 42.486202 533.45483 42.116009 534.17999 41.599998 c
534.89667 41.068573 535.4873 40.385704 535.90997 39.599998 c
536.40936 38.674217 536.69952 37.650139 536.76001 36.599998 c
532.45001 36.599998 l
532.3689 37.407814 531.99548 38.15818 531.40002 38.709999 c
530.74139 39.201763 529.93066 39.446033 529.10999 39.400002 c
528.01117 39.443886 526.95428 38.97459 526.25 38.130001 c
525.47595 37.084274 525.09692 35.798378 525.17999 34.5 c
525.17999 34.25 l
525.06915 32.928185 525.42279 31.609104 526.17999 30.52 c
526.92993 29.656698 528.03857 29.191074 529.17999 29.26 c
530.03918 29.240374 530.87909 29.515654 531.56 30.040001 c
532.25696 30.6341 532.6709 31.494667 532.70001 32.41 c
536.83002 32.41 l
536.77307 31.481009 536.54956 30.56983 536.16998 29.719999 c
535.80994 28.925537 535.28101 28.219131 534.62 27.65 c
533.91199 27.037626 533.08942 26.571953 532.20001 26.280001 c
531.16278 25.951204 530.07764 25.799086 528.98999 25.83 c
h
528.98999 25.83 m
f
546.10999 25.83 m
544.94214 25.818247 543.78125 26.011162 542.67999 26.4 c
541.66693 26.754923 540.74249 27.324593 539.96997 28.07 c
539.18414 28.798107 538.56647 29.688787 538.15997 30.68 c
537.71484 31.799129 537.49725 32.995789 537.52002 34.200001 c
537.52002 34.459999 l
537.50092 35.66391 537.71838 36.859852 538.15997 37.98 c
538.57251 38.997154 539.18842 39.919334 539.96997 40.689999 c
540.74268 41.432549 541.65308 42.016842 542.65002 42.41 c
543.71545 42.820148 544.84833 43.02705 545.98999 43.02 c
547.02679 43.026535 548.05743 42.86095 549.03998 42.529999 c
549.98627 42.220341 550.85565 41.712368 551.59003 41.040001 c
552.35754 40.310623 552.95801 39.423615 553.34998 38.439999 c
553.81622 37.232117 554.04047 35.944374 554.01001 34.650002 c
554.01001 33.389999 l
542.15002 33.389999 l
542.12817 32.218433 542.53741 31.079655 543.29999 30.190001 c
544.79657 28.902948 546.94452 28.706217 548.65002 29.700001 c
549.17029 30.120914 549.5246 30.712603 549.65002 31.370001 c
553.96002 31.370001 l
553.76654 29.715902 552.87952 28.221846 551.52002 27.26 c
549.90704 26.237431 548.01758 25.738005 546.10999 25.83 c
h
549.58002 36.189999 m
549.59344 37.207039 549.23822 38.194557 548.58002 38.970001 c
547.09491 40.191658 544.94586 40.166325 543.48999 38.91 c
542.78406 38.167538 542.34747 37.209835 542.25 36.189999 c
h
549.58002 36.189999 m
f
555.81 42.650002 m
560.37 42.650002 l
560.37 40.040001 l
560.83929 40.907139 561.52924 41.634998 562.37 42.150002 c
563.3916 42.772511 564.57465 43.078705 565.77002 43.029999 c
566.53009 43.037609 567.28534 42.908905 568 42.650002 c
568.66144 42.404957 569.2619 42.01944 569.76001 41.52 c
570.27209 40.937805 570.65997 40.257263 570.90002 39.52 c
571.18536 38.597607 571.32043 37.635307 571.29999 36.669998 c
571.29999 26.190001 l
566.73999 26.190001 l
566.73999 36.009998 l
566.81287 36.898712 566.56842 37.784492 566.04999 38.509998 c
565.47015 39.093895 564.65924 39.387424 563.84003 39.310001 c
562.93872 39.342999 562.06 39.023788 561.39001 38.419998 c
560.68109 37.695183 560.31702 36.701214 560.39001 35.689999 c
560.39001 26.190001 l
555.83002 26.190001 l
h
555.81 42.650002 m
f
579.97998 25.860001 m
578.52545 25.746792 577.08582 26.218279 575.97998 27.17 c
575.00818 28.222786 574.51587 29.63105 574.62 31.059999 c
574.62 39.400002 l
572.52002 39.400002 l
572.52002 42.650002 l
574.62 42.650002 l
574.62 46.209999 l
579.15997 46.209999 l
579.15997 42.650002 l
582.62 42.650002 l
582.62 39.41 l
579.15997 39.41 l
579.15997 31.48 l
579.12079 30.950956 579.28137 30.426439 579.60999 30.01 c
579.9787 29.663292 580.4751 29.48575 580.97998 29.52 c
581.29175 29.519159 581.60297 29.545931 581.90997 29.6 c
582.18408 29.652693 582.45215 29.733107 582.71002 29.84 c
582.71002 26.309999 l
582.40002 26.209999 582.01001 26.110001 581.54999 26.01 c
581.03247 25.911222 580.50684 25.861004 579.97998 25.860001 c
h
579.97998 25.860001 m
f
590.12 25.83 m
589.36487 25.822699 588.61407 25.94445 587.90002 26.190001 c
587.2312 26.427166 586.62323 26.809679 586.12 27.309999 c
585.59009 27.863043 585.18738 28.525135 584.94 29.25 c
584.64197 30.145809 584.49988 31.086128 584.52002 32.029999 c
584.52002 42.650002 l
589.04999 42.650002 l
589.04999 32.650002 l
588.98682 31.767046 589.24225 30.890696 589.77002 30.18 c
590.32275 29.596403 591.10828 29.291737 591.90997 29.35 c
592.80688 29.325804 593.67932 29.64403 594.34998 30.24 c
595.06573 30.960495 595.43097 31.95768 595.34998 32.970001 c
595.34998 42.650002 l
599.88 42.650002 l
599.88 26.190001 l
595.34998 26.190001 l
595.34998 28.77 l
594.91461 27.913021 594.25439 27.190575 593.44 26.68 c
592.44086 26.076641 591.28613 25.781 590.12 25.83 c
h
590.12 25.83 m
f
602.71002 42.650002 m
607.28003 42.650002 l
607.28003 39.5 l
607.70483 40.506405 608.39636 41.377728 609.28003 42.02 c
610.26324 42.628998 611.40399 42.935055 612.56 42.900002 c
612.56 38.650002 l
611.18481 38.752579 609.81091 38.435253 608.62 37.740002 c
607.62341 36.94585 607.10272 35.696869 607.23999 34.43 c
607.23999 26.190001 l
602.66998 26.190001 l
h
602.71002 42.650002 m
f
621.62 25.83 m
620.45215 25.818247 619.29126 26.011162 618.19 26.4 c
617.17688 26.754923 616.25244 27.324593 615.47998 28.07 c
614.69415 28.798107 614.07648 29.688787 613.66998 30.68 c
613.22479 31.799129 613.00726 32.995789 613.03003 34.200001 c
613.03003 34.459999 l
613.01093 35.66391 613.22839 36.859852 613.66998 37.98 c
614.08252 38.997154 614.69843 39.919334 615.47998 40.689999 c
616.25269 41.432549 617.16309 42.016842 618.15997 42.41 c
619.22546 42.820148 620.35834 43.02705 621.5 43.02 c
622.5368 43.026535 623.56744 42.86095 624.54999 42.529999 c
625.49493 42.217293 626.36365 41.709679 627.09998 41.040001 c
627.86755 40.310623 628.46802 39.423615 628.85999 38.439999 c
629.32623 37.232117 629.55048 35.944374 629.52002 34.650002 c
629.52002 33.389999 l
617.65997 33.389999 l
617.64001 32.220486 618.04504 31.083441 618.79999 30.190001 c
620.29974 28.901232 622.45148 28.704527 624.15997 29.700001 c
624.6803 30.120914 625.03461 30.712603 625.15997 31.370001 c
629.46997 31.370001 l
629.27649 29.715902 628.38953 28.221846 627.03003 27.26 c
625.41705 26.237431 623.52759 25.738005 621.62 25.83 c
h
625.08002 36.189999 m
625.09894 37.207962 624.74304 38.197372 624.08002 38.970001 c
622.59491 40.191658 620.44586 40.166325 618.98999 38.91 c
618.28406 38.167538 617.84747 37.209835 617.75 36.189999 c
h
625.08002 36.189999 m
f
ep
end
%%Trailer
%%EOF
